{
  "manifest": {
    "id": "execute-code",
    "author": "碎蜗牛壳",
    "version": "1.0.1",
    "pluginVersion": "1.12.0"
  },
  "description": {
    "original": "Allows to execute code snippets within a note. Supported programming languages:  C, CPP, Dart, Golang, Groovy, Kotlin, Java, JavaScript, TypeScript, Lean, Lua, CSharp, Prolog, Rust, Python, R, Ruby, Wolfram Mathematica, Haskell, Scala, Racket, F#, Batch, Shell & Powershell.",
    "translation": "Allows to execute code snippets within a note. Supported programming languages:  C, CPP, Dart, Golang, Groovy, Kotlin, Java, JavaScript, TypeScript, Lean, Lua, CSharp, Prolog, Rust, Python, R, Ruby, Wolfram Mathematica, Haskell, Scala, Racket, F#, Batch, Shell & Powershell."
  },
  "dict": {
    "Notice(`Failed to parse code block arguments from line:\n${firstLineOfCode}\n\nFailed with error:\n${err}`)": "Notice(`无法解析代码块参数，来自以下行:\n${firstLineOfCode}\n\n错误信息:\n${err}`)",
    "Notice(`Named export \"${namedImport}\" does not exist but was imported`)": "Notice(`命名导出 \"${namedImport}\" 不存在，但已被导入`)",
    "Notice(`Error: named export ${currentArgs.label} exported more than once`)": "Notice(`错误：执行了多次命名导出 ${currentArgs.label} `)",
    "Notice(label)": "Notice(标签)",
    "Notice(\"Runtime exited\")": "Notice(\"运行中退出\")",
    "Notice(\"Error!\")": "Notice(\"错误！\")",
    "Notice(\"Running...\")": "Notice(\"正在运行...\")",
    "Notice(\"Done!\")": "Notice(\"已完成\")",
    ".log(\"Cling path set to: \" + sanitized)": ".log(\"粘贴路径设置为: \" + sanitized)",
    ".log(\"CPP args set to: \" + value)": ".log(\"CPP 参数设置为: \" + value)",
    ".log(\"Cling std set to: \" + value)": ".log(\"Cling标准设置为: \" + value)",
    ".log(\"Cpp use main set to: \" + value)": ".log(\"Cpp使用的main设置改为: \" + value)",
    ".log(\"gcc / Cling path set to: \" + sanitized)": ".log(\"gcc / Cling 路径设置为: \" + sanitized)",
    ".log(\"gcc / Cling args set to: \" + value)": ".log(\"gcc / Cling 参数设置为: \" + value)",
    ".log(\"C use main set to: \" + value)": ".log(\"C 使用主设置为: \" + value)",
    ".log(\"dotnet path set to: \" + sanitized)": ".log(\"已设置的 dotnet 路径为: \" + sanitized)",
    ".log(\"CSharp args set to: \" + value)": ".log(\"CSharp 参数设置为: \" + value)",
    ".log(\"F# path set to: \" + sanitized)": ".log(\"F# 路径设置为: \" + sanitized)",
    ".log(\"F# args set to: \" + value)": ".log(\"F# 参数设置为: \" + value)",
    ".log(\"F# file extension set to: \" + value)": ".log(\"F# 文件扩展名设置为: \" + value)",
    ".log(\"Golang path set to: \" + sanitized)": ".log(\"Golang路径设置为: \" + sanitized)",
    ".log(\"Groovy path set to: \" + sanitized)": ".log(\"Groovy 路径设置为: \" + sanitized)",
    ".log(\"Groovy args set to: \" + value)": ".log(\"Groovy 参数设置为: \" + value)",
    ".log(value ? \"Now using ghci for haskell\" : \"Now using runghc for haskell.\")": ".log(value ? \"现在使用 ghci 运行 Haskell\" : \"现在使用 runghc 运行 Haskell。\")",
    ".log(\"ghci path set to: \" + sanitized)": ".log(\"ghci 路径设置为: \" + sanitized)",
    ".log(\"runghc path set to: \" + sanitized)": ".log(\"runghc 路径设置为: \" + sanitized)",
    ".log(\"ghc path set to: \" + sanitized)": ".log(\"ghc 路径设置为: \" + sanitized)",
    ".log(\"Java path set to: \" + sanitized)": ".log(\"Java 路径设置为: \" + sanitized)",
    ".log(\"Java args set to: \" + value)": ".log(\"Java 参数设置为: \" + value)",
    ".log(\"Node path set to: \" + sanitized)": ".log(\"节点路径设置为: \" + sanitized)",
    ".log(\"Node args set to: \" + value)": ".log(\"节点参数设置为: \" + value)",
    ".log(\"Kotlin path set to: \" + sanitized)": ".log(\"Kotlin 路径设置为: \" + sanitized)",
    ".log(\"Kotlin args set to: \" + value)": ".log(\"Kotlin 参数设置为: \" + value)",
    ".log(\"lean path set to: \" + sanitized)": ".log(\"lean 路径设置为: \" + sanitized)",
    ".log(\"Lean args set to: \" + value)": ".log(\"lean 参数设置为: \" + value)",
    ".log(\"lua path set to: \" + sanitized)": ".log(\"lua 路径设置为: \" + sanitized)",
    ".log(\"Lua args set to: \" + value)": ".log(\"lua 参数设置为: \" + value)",
    ".log(\"dart path set to: \" + sanitized)": ".log(\"Dart 路径已设置为: \" + sanitized)",
    ".log(\"Dart args set to: \" + value)": ".log(\"Dart 参数设置为: \" + value)",
    ".log(\"Mathematica path set to: \" + sanitized)": ".log(\"Mathematica 路径已设置为: \" + sanitized)",
    ".log(\"Mathematica args set to: \" + value)": ".log(\"Mathematica 参数设置为: \" + value)",
    ".log(\"Powershell path set to: \" + sanitized)": ".log(\"已将 PowerShell 路径设置为: \" + sanitized)",
    ".log(\"Powershell args set to: \" + value)": ".log(\"PowerShell 参数设置为: \" + value)",
    ".log(\"Powershell file extension set to: \" + value)": ".log(\"PowerShell 文件扩展名设置为: \" + value)",
    ".log(\"Prolog answer limit set to: \" + value)": ".log(\"Prolog 回答限制设置为: \" + value)",
    ".log(value ? \"Embedding Plots into Notes.\" : \"Not embedding Plots into Notes.\")": ".log(value ? \"将图嵌入到笔记中。\" : \"不将图嵌入到笔记中。\")",
    ".log(\"Python path set to: \" + sanitized)": ".log(\"Python路径设置为: \" + sanitized)",
    ".log(\"Python args set to: \" + value)": ".log(\"Python 参数设置为: \" + value)",
    ".log(value ? \"Embedding R Plots into Notes.\" : \"Not embedding R Plots into Notes.\")": ".log(value ? \"将 R 图嵌入到笔记中。\" : \"不将 R 图嵌入到笔记中。\")",
    ".log(\"R path set to: \" + sanitized)": ".log(\"R路径设置为: \" + sanitized)",
    ".log(\"R args set to: \" + value)": ".log(\"R 参数设置为: \" + value)",
    ".log(\"ruby path set to: \" + sanitized)": ".log(\"Ruby 路径设置为: \" + sanitized)",
    ".log(\"ruby args set to: \" + value)": ".log(\"ruby 参数设置为: \" + value)",
    ".log(\"Cargo path set to: \" + sanitized)": ".log(\"Cargo 路径设置为: \" + sanitized)",
    ".log(\"scala path set to: \" + sanitized)": ".log(\"Scala 路径已设置为: \" + sanitized)",
    ".log(\"Scala args set to: \" + value)": ".log(\"Scala 参数设置为: \" + value)",
    ".log(\"racket path set to: \" + sanitized)": ".log(\"racket path set to: \" + sanitized)",
    ".log(\"Racket args set to: \" + value)": ".log(\"Racket args set to: \" + value)",
    ".log(\"Shell path set to: \" + sanitized)": ".log(\"Shell path set to: \" + sanitized)",
    ".log(\"Shell args set to: \" + value)": ".log(\"Shell args set to: \" + value)",
    ".log(\"Shell file extension set to: \" + value)": ".log(\"Shell file extension set to: \" + value)",
    ".log(\"Batch path set to: \" + sanitized)": ".log(\"Batch path set to: \" + sanitized)",
    ".log(\"Batch args set to: \" + value)": ".log(\"Batch args set to: \" + value)",
    ".log(\"Batch file extension set to: \" + value)": ".log(\"Batch file extension set to: \" + value)",
    ".log(\"ts-node path set to: \" + sanitized)": ".log(\"ts-node path set to: \" + sanitized)",
    ".log(\"TypeScript args set to: \" + value)": ".log(\"TypeScript args set to: \" + value)",
    ".log(\"SQL args set to: \" + value)": ".log(\"SQL args set to: \" + value)",
    ".log(\"Octave path set to: \" + sanitized)": ".log(\"Octave path set to: \" + sanitized)",
    ".log(\"Octave args set to: \" + value)": ".log(\"Octave args set to: \" + value)",
    ".log(\"Maxima path set to: \" + sanitized)": ".log(\"Maxima path set to: \" + sanitized)",
    ".log(\"Maxima args set to: \" + value)": ".log(\"Maxima args set to: \" + value)",
    ".log(\"Applescript path set to: \" + sanitized)": ".log(\"Applescript path set to: \" + sanitized)",
    ".log(\"Applescript args set to: \" + value)": ".log(\"Applescript args set to: \" + value)",
    ".log(\"zig path set to: \" + sanitized)": ".log(\"zig path set to: \" + sanitized)",
    ".log(\"zig args set to: \" + value)": ".log(\"zig args set to: \" + value)",
    ".log(\"ocaml path set to: \" + sanitized)": ".log(\"ocaml path set to: \" + sanitized)",
    ".log(\"ocaml args set to: \" + value)": ".log(\"ocaml args set to: \" + value)",
    ".log(\"Swift path set to: \" + sanitized)": ".log(\"Swift path set to: \" + sanitized)",
    ".log(\"Swift args set to: \" + value)": ".log(\"Swift args set to: \" + value)",
    ".log(\"Timeout set to: \" + value)": ".log(\"超时设置为: \" + value)",
    ".log(\"Allow Input set to: \" + value)": ".log(\"Allow Input set to: \" + value)",
    ".log(\"WSL Mode set to: \" + value)": ".log(\"WSL 模式设置为: \" + value)",
    ".log(\"Only Show Current Block Log set to: \" + value)": ".log(\"Only Show Current Block Log set to: \" + value)",
    ".log(`${language} inject set to ${value}`)": ".log(`${language} inject set to ${value}`)",
    ".log('\" + TOGGLE_HTML_SIGIL + image + TOGGLE_HTML_SIGIL + \"')": ".log('\" + TOGGLE_HTML_SIGIL + image + TOGGLE_HTML_SIGIL + \"')",
    ".log(source)": ".log(source)",
    ".log(${toggle})": ".log(${toggle})",
    ".log(${html})": ".log(${html})",
    ".log(\"setup\")": ".log(\"setup\")",
    ".log(\"Unloaded plugin: Execute Code\")": ".log(\"已卸载插件: Execute Code\")",
    "<error(\\n)": "<error(\\n)",
    ".error(new Term(\"throw\", [expr.value])": ".error(new Term(\"throw\", [expr.value])",
    "_error(answer)": "_error(answer)",
    ".error(answer)": ".error(answer)",
    ".error(\n                new Term(\"throw\", [\n                  pl.error.syntax(\n                    token ? token : tokens[expr_position - 1],\n                    token && token.error ? token.error : \". or operator expected\",\n                    !token\n                  )": ".error(\n                new Term(\"throw\", [\n                  pl.error.syntax(\n                    token ? token : tokens[expr_position - 1],\n                    token && token.error ? token.error : \". or operator expected\",\n                    !token\n                  )",
    "_error(pl.error.type(\"module\", closure.args[0], atom.indicator)": "_error(pl.error.type(\"module\", closure.args[0], atom.indicator)",
    "_error(pl.error.instantiation(atom.indicator)": "_error(pl.error.instantiation(atom.indicator)",
    "_error(pl.error.type(\"callable\", closure, atom.indicator)": "_error(pl.error.type(\"callable\", closure, atom.indicator)",
    "_error(pl.error.type(\"callable\", goal, atom.indicator)": "_error(pl.error.type(\"callable\", goal, atom.indicator)",
    ".error(ex)": ".error(ex)",
    ".error(pl.error.existence(\"source_sink\", new Term(string)": ".error(pl.error.existence(\"source_sink\", new Term(string)",
    "_error(error)": "_error(error)",
    "_error(pl.error.type(\"module\", context_module, this.level.indicator)": "_error(pl.error.type(\"module\", context_module, this.level.indicator)",
    "_error(pl.error.existence(\"procedure\", atom.indicator, this.level.indicator)": "_error(pl.error.existence(\"procedure\", atom.indicator, this.level.indicator)",
    "_error(pl.error.instantiation(this.level.indicator)": "_error(pl.error.instantiation(this.level.indicator)",
    "_error(pl.error.type(\"callable\", term, this.level.indicator)": "_error(pl.error.type(\"callable\", term, this.level.indicator)",
    "_error(this.head_point()": "_error(this.head_point()",
    "_error(this.points.pop()": "_error(this.points.pop()",
    ".error(error2)": ".error(error2)",
    ".error(pl.error.existence(\"module\", module_id, atom.indicator)": ".error(pl.error.existence(\"module\", module_id, atom.indicator)",
    "_error(pl.error.permission(\"modify\", \"operator\", operator, atom.indicator)": "_error(pl.error.permission(\"modify\", \"operator\", operator, atom.indicator)",
    "_error(pl.error.type(\"variable\", variable, atom.indicator)": "_error(pl.error.type(\"variable\", variable, atom.indicator)",
    "_error(pl.error.type(\"atom\", module3, atom.indicator)": "_error(pl.error.type(\"atom\", module3, atom.indicator)",
    "_error(pl.error.type(\"integer\", priority, atom.indicator)": "_error(pl.error.type(\"integer\", priority, atom.indicator)",
    "_error(pl.error.type(\"atom\", type, atom.indicator)": "_error(pl.error.type(\"atom\", type, atom.indicator)",
    "_error(pl.error.type(\"list\", operators, atom.indicator)": "_error(pl.error.type(\"list\", operators, atom.indicator)",
    "_error(pl.error.permission(\"create\", \"operator\", operators, atom.indicator)": "_error(pl.error.permission(\"create\", \"operator\", operators, atom.indicator)",
    "_error(pl.error.type(\"atom\", operator, atom.indicator)": "_error(pl.error.type(\"atom\", operator, atom.indicator)",
    "_error(pl.error.domain(\"operator_priority\", priority, atom.indicator)": "_error(pl.error.domain(\"operator_priority\", priority, atom.indicator)",
    "_error(pl.error.permission(\"create\", \"operator\", operator, atom.indicator)": "_error(pl.error.permission(\"create\", \"operator\", operator, atom.indicator)",
    "_error(pl.error.domain(\"operator_specifier\", type, atom.indicator)": "_error(pl.error.domain(\"operator_specifier\", type, atom.indicator)",
    "_error(pl.error.type(\"atom\", specifier, atom.indicator)": "_error(pl.error.type(\"atom\", specifier, atom.indicator)",
    "_error(pl.error.domain(\"operator_specifier\", specifier, atom.indicator)": "_error(pl.error.domain(\"operator_specifier\", specifier, atom.indicator)",
    "_error(pl.error.instantiation(thread.level.indicator)": "_error(pl.error.instantiation(thread.level.indicator)",
    "_error(answer.args[0])": "_error(answer.args[0])",
    "_error(pl.error.type(\"callable\", call, atom.indicator)": "_error(pl.error.type(\"callable\", call, atom.indicator)",
    "_error(pl.error.type(\"callable\", cleanup, atom.indicator)": "_error(pl.error.type(\"callable\", cleanup, atom.indicator)",
    "_error(pl.error.type(\"callable\", setup, atom.indicator)": "_error(pl.error.type(\"callable\", setup, atom.indicator)",
    "_error(pl.error.type(\"list\", instances, atom.indicator)": "_error(pl.error.type(\"list\", instances, atom.indicator)",
    "_error(pl.error.type(\"list\", tail, atom.indicator)": "_error(pl.error.type(\"list\", tail, atom.indicator)",
    "_error(pl.error.type(\"integer\", atom.args[2], atom.indicator)": "_error(pl.error.type(\"integer\", atom.args[2], atom.indicator)",
    "_error(pl.error.type(\"atomic\", atom.args[1], atom.indicator)": "_error(pl.error.type(\"atomic\", atom.args[1], atom.indicator)",
    "_error(pl.error.type(\"atom\", atom.args[1], atom.indicator)": "_error(pl.error.type(\"atom\", atom.args[1], atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", atom.args[2], atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", atom.args[2], atom.indicator)",
    "_error(pl.error.type(\"integer\", atom.args[0], atom.indicator)": "_error(pl.error.type(\"integer\", atom.args[0], atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", atom.args[0], atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", atom.args[0], atom.indicator)",
    "_error(pl.error.type(\"compound\", atom.args[1], atom.indicator)": "_error(pl.error.type(\"compound\", atom.args[1], atom.indicator)",
    "_error(pl.error.type(\"list\", atom.args[1], atom.indicator)": "_error(pl.error.type(\"list\", atom.args[1], atom.indicator)",
    "_error(pl.error.domain(\"non_empty_list\", atom.args[1], atom.indicator)": "_error(pl.error.domain(\"non_empty_list\", atom.args[1], atom.indicator)",
    "_error(pl.error.type(\"atomic\", atom.args[1].args[0], atom.indicator)": "_error(pl.error.type(\"atomic\", atom.args[1].args[0], atom.indicator)",
    "_error(pl.error.type(\"atom\", atom.args[1].args[0], atom.indicator)": "_error(pl.error.type(\"atom\", atom.args[1].args[0], atom.indicator)",
    "_error(pl.error.type(\"list\", vars, atom.indicator)": "_error(pl.error.type(\"list\", vars, atom.indicator)",
    "_error(pl.error.type(\"integer\", start, atom.indicator)": "_error(pl.error.type(\"integer\", start, atom.indicator)",
    "_error(pl.error.type(\"integer\", end, atom.indicator)": "_error(pl.error.type(\"integer\", end, atom.indicator)",
    "_error(pl.error.type(\"module\", head.args[0], atom.indicator)": "_error(pl.error.type(\"module\", head.args[0], atom.indicator)",
    "_error(pl.error.type(\"callable\", head, atom.indicator)": "_error(pl.error.type(\"callable\", head, atom.indicator)",
    "_error(pl.error.type(\"callable\", body, atom.indicator)": "_error(pl.error.type(\"callable\", body, atom.indicator)",
    "_error(pl.error.permission(\"access\", \"private_procedure\", str_indicator(head.indicator)": "_error(pl.error.permission(\"access\", \"private_procedure\", str_indicator(head.indicator)",
    "_error(pl.error.permission(\"modify\", \"static_procedure\", str_indicator(head.indicator)": "_error(pl.error.permission(\"modify\", \"static_procedure\", str_indicator(head.indicator)",
    "_error(pl.error.type(\"module\", indicator2.args[0], atom.indicator)": "_error(pl.error.type(\"module\", indicator2.args[0], atom.indicator)",
    "_error(pl.error.type(\"predicate_indicator\", indicator2, atom.indicator)": "_error(pl.error.type(\"predicate_indicator\", indicator2, atom.indicator)",
    "_error(pl.error.type(\"atom\", indicator2.args[0], atom.indicator)": "_error(pl.error.type(\"atom\", indicator2.args[0], atom.indicator)",
    "_error(pl.error.type(\"integer\", indicator2.args[1], atom.indicator)": "_error(pl.error.type(\"integer\", indicator2.args[1], atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", indicator2.args[1], atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", indicator2.args[1], atom.indicator)",
    "_error(pl.error.type(\"atom\", module_id, atom.indicator)": "_error(pl.error.type(\"atom\", module_id, atom.indicator)",
    "_error(pl.error.domain(\"predicate_property\", property, atom.indicator)": "_error(pl.error.domain(\"predicate_property\", property, atom.indicator)",
    "_error(pl.error.type(\"list\", expected, atom.indicator)": "_error(pl.error.type(\"list\", expected, atom.indicator)",
    "_error(pl.error.type(\"list\", list, atom.indicator)": "_error(pl.error.type(\"list\", list, atom.indicator)",
    "_error(pl.error.type(\"pair\", elem, atom.indicator)": "_error(pl.error.type(\"pair\", elem, atom.indicator)",
    "_error(pl.error.type(\"pair\", head, atom.indicator)": "_error(pl.error.type(\"pair\", head, atom.indicator)",
    "_error(pl.error.type(\"callable\", clause, atom.indicator)": "_error(pl.error.type(\"callable\", clause, atom.indicator)",
    "_error(pl.error.type(\"module\", module_atom, atom.indicator)": "_error(pl.error.type(\"module\", module_atom, atom.indicator)",
    "_error(pl.error.type(\"module\", predicate.args[0], atom.indicator)": "_error(pl.error.type(\"module\", predicate.args[0], atom.indicator)",
    "_error(pl.error.type(\"predicate_indicator\", predicate, atom.indicator)": "_error(pl.error.type(\"predicate_indicator\", predicate, atom.indicator)",
    "_error(pl.error.type(\"atom\", predicate.args[0], atom.indicator)": "_error(pl.error.type(\"atom\", predicate.args[0], atom.indicator)",
    "_error(pl.error.type(\"integer\", predicate.args[1], atom.indicator)": "_error(pl.error.type(\"integer\", predicate.args[1], atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", predicate.args[1], atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", predicate.args[1], atom.indicator)",
    "_error(pl.error.representation(\"max_arity\", atom.indicator)": "_error(pl.error.representation(\"max_arity\", atom.indicator)",
    "_error(pl.error.permission(\"modify\", \"static_procedure\", atom.args[0], atom.indicator)": "_error(pl.error.permission(\"modify\", \"static_procedure\", atom.args[0], atom.indicator)",
    "_error(pl.error.type(\"atom\", atom.args[0], atom.indicator)": "_error(pl.error.type(\"atom\", atom.args[0], atom.indicator)",
    "_error(pl.error.type(\"integer\", atom.args[1], atom.indicator)": "_error(pl.error.type(\"integer\", atom.args[1], atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", atom.args[1], atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", atom.args[1], atom.indicator)",
    "_error(pl.error.type(\"atom\", start, atom.indicator)": "_error(pl.error.type(\"atom\", start, atom.indicator)",
    "_error(pl.error.type(\"atom\", end, atom.indicator)": "_error(pl.error.type(\"atom\", end, atom.indicator)",
    "_error(pl.error.type(\"atom\", whole, atom.indicator)": "_error(pl.error.type(\"atom\", whole, atom.indicator)",
    "_error(pl.error.type(\"atom\", atom1, atom.indicator)": "_error(pl.error.type(\"atom\", atom1, atom.indicator)",
    "_error(pl.error.type(\"integer\", before, atom.indicator)": "_error(pl.error.type(\"integer\", before, atom.indicator)",
    "_error(pl.error.type(\"integer\", length, atom.indicator)": "_error(pl.error.type(\"integer\", length, atom.indicator)",
    "_error(pl.error.type(\"integer\", after, atom.indicator)": "_error(pl.error.type(\"integer\", after, atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", before, atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", before, atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", length, atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", length, atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", after, atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", after, atom.indicator)",
    "_error(pl.error.type(\"atom\", subatom, atom.indicator)": "_error(pl.error.type(\"atom\", subatom, atom.indicator)",
    "_error(pl.error.type(\"character\", pointer.args[0], atom.indicator)": "_error(pl.error.type(\"character\", pointer.args[0], atom.indicator)",
    "_error(pl.error.type(\"integer\", pointer.args[0], atom.indicator)": "_error(pl.error.type(\"integer\", pointer.args[0], atom.indicator)",
    "_error(pl.error.representation(\"character_code\", atom.indicator)": "_error(pl.error.representation(\"character_code\", atom.indicator)",
    "_error(pl.error.type(\"character\", char, atom.indicator)": "_error(pl.error.type(\"character\", char, atom.indicator)",
    "_error(pl.error.type(\"integer\", code, atom.indicator)": "_error(pl.error.type(\"integer\", code, atom.indicator)",
    "_error(pl.error.type(\"number\", num, atom.indicator)": "_error(pl.error.type(\"number\", num, atom.indicator)",
    "_error(pl.error.syntax_by_predicate(\"parseable_number\", atom.indicator)": "_error(pl.error.syntax_by_predicate(\"parseable_number\", atom.indicator)",
    "_error(pl.error.type(\"atom\", original, atom.indicator)": "_error(pl.error.type(\"atom\", original, atom.indicator)",
    "_error(pl.error.type(\"atom\", upcase, atom.indicator)": "_error(pl.error.type(\"atom\", upcase, atom.indicator)",
    "_error(pl.error.type(\"atom\", downcase, atom.indicator)": "_error(pl.error.type(\"atom\", downcase, atom.indicator)",
    "_error(pl.error.type(\"atomic\", atomic1, atom.indicator)": "_error(pl.error.type(\"atomic\", atomic1, atom.indicator)",
    "_error(pl.error.type(\"atomic\", atomic2, atom.indicator)": "_error(pl.error.type(\"atomic\", atomic2, atom.indicator)",
    "_error(pl.error.type(\"atom\", concat, atom.indicator)": "_error(pl.error.type(\"atom\", concat, atom.indicator)",
    "_error(pl.error.type(\"atomic\", separator, atom.indicator)": "_error(pl.error.type(\"atomic\", separator, atom.indicator)",
    "_error(pl.error.type(\"atomic\", pointer.args[0], atom.indicator)": "_error(pl.error.type(\"atomic\", pointer.args[0], atom.indicator)",
    "_error(pl.error.type(\"atom\", order, atom.indicator)": "_error(pl.error.type(\"atom\", order, atom.indicator)",
    "_error(pl.error.domain(\"order\", order, atom.indicator)": "_error(pl.error.domain(\"order\", order, atom.indicator)",
    "_error(op)": "_error(op)",
    "_error(pl.error.type(\"integer\", lower, atom.indicator)": "_error(pl.error.type(\"integer\", lower, atom.indicator)",
    "_error(pl.error.type(\"integer\", upper, atom.indicator)": "_error(pl.error.type(\"integer\", upper, atom.indicator)",
    "_error(pl.error.type(\"integer\", bet, atom.indicator)": "_error(pl.error.type(\"integer\", bet, atom.indicator)",
    "_error(pl.error.type(\"integer\", n, atom.indicator)": "_error(pl.error.type(\"integer\", n, atom.indicator)",
    "_error(pl.error.type(\"integer\", m, atom.indicator)": "_error(pl.error.type(\"integer\", m, atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", n, atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", n, atom.indicator)",
    "_error(pl.error.domain(\"not_less_than_zero\", m, atom.indicator)": "_error(pl.error.domain(\"not_less_than_zero\", m, atom.indicator)",
    "_error(cmp)": "_error(cmp)",
    "_error(pl.error.domain(\"stream\", stream, atom.indicator)": "_error(pl.error.domain(\"stream\", stream, atom.indicator)",
    "_error(pl.error.domain(\"stream_or_alias\", input, atom.indicator)": "_error(pl.error.domain(\"stream_or_alias\", input, atom.indicator)",
    "_error(pl.error.existence(\"stream\", input, atom.indicator)": "_error(pl.error.existence(\"stream\", input, atom.indicator)",
    "_error(pl.error.permission(\"input\", \"stream\", input, atom.indicator)": "_error(pl.error.permission(\"input\", \"stream\", input, atom.indicator)",
    "_error(pl.error.domain(\"stream_or_alias\", output, atom.indicator)": "_error(pl.error.domain(\"stream_or_alias\", output, atom.indicator)",
    "_error(pl.error.existence(\"stream\", output, atom.indicator)": "_error(pl.error.existence(\"stream\", output, atom.indicator)",
    "_error(pl.error.permission(\"output\", \"stream\", output, atom.indicator)": "_error(pl.error.permission(\"output\", \"stream\", output, atom.indicator)",
    "_error(pl.error.type(\"atom\", mode, atom.indicator)": "_error(pl.error.type(\"atom\", mode, atom.indicator)",
    "_error(pl.error.type(\"list\", options, atom.indicator)": "_error(pl.error.type(\"list\", options, atom.indicator)",
    "_error(pl.error.uninstantiation(stream, atom.indicator)": "_error(pl.error.uninstantiation(stream, atom.indicator)",
    "_error(pl.error.domain(\"source_sink\", dest, atom.indicator)": "_error(pl.error.domain(\"source_sink\", dest, atom.indicator)",
    "_error(pl.error.domain(\"io_mode\", mode, atom.indicator)": "_error(pl.error.domain(\"io_mode\", mode, atom.indicator)",
    "_error(pl.error.domain(\"stream_option\", property, atom.indicator)": "_error(pl.error.domain(\"stream_option\", property, atom.indicator)",
    "_error(pl.error.permission(\"open\", \"source_sink\", new Term(\"alias\", [new Term(alias, [])": "_error(pl.error.permission(\"open\", \"source_sink\", new Term(\"alias\", [new Term(alias, [])",
    "_error(pl.error.permission(\"open\", \"source_sink\", dest, atom.indicator)": "_error(pl.error.permission(\"open\", \"source_sink\", dest, atom.indicator)",
    "_error(pl.error.existence(\"source_sink\", dest, atom.indicator)": "_error(pl.error.existence(\"source_sink\", dest, atom.indicator)",
    "_error(pl.error.domain(\"stream_or_alias\", stream, atom.indicator)": "_error(pl.error.domain(\"stream_or_alias\", stream, atom.indicator)",
    "_error(pl.error.existence(\"stream\", stream, atom.indicator)": "_error(pl.error.existence(\"stream\", stream, atom.indicator)",
    "_error(pl.error.domain(\"close_option\", property, atom.indicator)": "_error(pl.error.domain(\"close_option\", property, atom.indicator)",
    "_error(pl.error.permission(\"output\", \"stream\", stream, atom.indicator)": "_error(pl.error.permission(\"output\", \"stream\", stream, atom.indicator)",
    "_error(pl.error.domain(\"stream_property\", property, atom.indicator)": "_error(pl.error.domain(\"stream_property\", property, atom.indicator)",
    "_error(pl.error.domain(\"stream_position\", position, atom.indicator)": "_error(pl.error.domain(\"stream_position\", position, atom.indicator)",
    "_error(pl.error.type(\"atom\", field, atom.indicator)": "_error(pl.error.type(\"atom\", field, atom.indicator)",
    "_error(pl.error.type(\"integer\", value, atom.indicator)": "_error(pl.error.type(\"integer\", value, atom.indicator)",
    "_error(pl.error.permission(\"reposition\", \"stream\", stream, atom.indicator)": "_error(pl.error.permission(\"reposition\", \"stream\", stream, atom.indicator)",
    "_error(pl.error.type(\"in_character\", char, atom.indicator)": "_error(pl.error.type(\"in_character\", char, atom.indicator)",
    "_error(pl.error.permission(\"input\", \"stream\", stream, atom.indicator)": "_error(pl.error.permission(\"input\", \"stream\", stream, atom.indicator)",
    "_error(pl.error.permission(\"input\", \"binary_stream\", stream, atom.indicator)": "_error(pl.error.permission(\"input\", \"binary_stream\", stream, atom.indicator)",
    "_error(pl.error.permission(\"input\", \"past_end_of_stream\", stream, atom.indicator)": "_error(pl.error.permission(\"input\", \"past_end_of_stream\", stream, atom.indicator)",
    "_error(pl.error.representation(\"character\", atom.indicator)": "_error(pl.error.representation(\"character\", atom.indicator)",
    "_error(pl.error.representation(\"in_character_code\", atom.indicator)": "_error(pl.error.representation(\"in_character_code\", atom.indicator)",
    "_error(pl.error.permission(\"output\", \"binary_stream\", stream, atom.indicator)": "_error(pl.error.permission(\"output\", \"binary_stream\", stream, atom.indicator)",
    "_error(pl.error.type(\"in_byte\", byte, atom.indicator)": "_error(pl.error.type(\"in_byte\", byte, atom.indicator)",
    "_error(pl.error.permission(\"input\", \"text_stream\", stream, atom.indicator)": "_error(pl.error.permission(\"input\", \"text_stream\", stream, atom.indicator)",
    "_error(pl.error.representation(\"byte\", atom.indicator)": "_error(pl.error.representation(\"byte\", atom.indicator)",
    "_error(pl.error.type(\"byte\", byte, atom.indicator)": "_error(pl.error.type(\"byte\", byte, atom.indicator)",
    "_error(pl.error.permission(\"output\", \"text_stream\", stream, atom.indicator)": "_error(pl.error.permission(\"output\", \"text_stream\", stream, atom.indicator)",
    "_error(pl.error.domain(\"read_option\", property, atom.indicator)": "_error(pl.error.domain(\"read_option\", property, atom.indicator)",
    "_error(pl.error.syntax(last_token, \"unexpected end of file\", false)": "_error(pl.error.syntax(last_token, \"unexpected end of file\", false)",
    "_error(pl.error.syntax(last_token, \"token not found\", true)": "_error(pl.error.syntax(last_token, \"token not found\", true)",
    "_error(pl.error.syntax(tokens[expr.len], \"unexpected token\", false)": "_error(pl.error.syntax(tokens[expr.len], \"unexpected token\", false)",
    "_error(expr.value)": "_error(expr.value)",
    "_error(pl.error.permission(\"output\", \"past_end_of_stream\", stream, atom.indicator)": "_error(pl.error.permission(\"output\", \"past_end_of_stream\", stream, atom.indicator)",
    "_error(pl.error.domain(\"write_option\", property, atom.indicator)": "_error(pl.error.domain(\"write_option\", property, atom.indicator)",
    "_error(pl.error.type(\"integer\", int, atom.indicator)": "_error(pl.error.type(\"integer\", int, atom.indicator)",
    "_error(pl.error.type(\"atom\", flag, atom.indicator)": "_error(pl.error.type(\"atom\", flag, atom.indicator)",
    "_error(pl.error.domain(\"prolog_flag\", flag, atom.indicator)": "_error(pl.error.domain(\"prolog_flag\", flag, atom.indicator)",
    "_error(pl.error.permission(\"modify\", \"flag\", flag, atom.indicator)": "_error(pl.error.permission(\"modify\", \"flag\", flag, atom.indicator)",
    "_error(pl.error.domain(\"flag_value\", new Term(\"+\", [flag, value])": "_error(pl.error.domain(\"flag_value\", new Term(\"+\", [flag, value])",
    "_error(pl.error.type(\"atom\", src, atom.indicator)": "_error(pl.error.type(\"atom\", src, atom.indicator)",
    "_error(err)": "_error(err)",
    "_error(pl.error.type(\"number\", time, atom.indicator)": "_error(pl.error.type(\"number\", time, atom.indicator)",
    "_error(pl.error.domain(\"time_property\", property, atom.indicator)": "_error(pl.error.domain(\"time_property\", property, atom.indicator)",
    "_error(pl.error.type(\"integer\", year, atom.indicator)": "_error(pl.error.type(\"integer\", year, atom.indicator)",
    "_error(pl.error.type(\"integer\", month, atom.indicator)": "_error(pl.error.type(\"integer\", month, atom.indicator)",
    "_error(pl.error.type(\"callable\", grbody, atom.indicator)": "_error(pl.error.type(\"callable\", grbody, atom.indicator)",
    ".error(\"Invalid encoding. \" + value + 'Please use one of the following encodings: \"ascii\", \"utf8\", \"utf-8\", \"utf16le\", \"ucs2\", \"ucs-2\", \"base64\", \"latin1\", \"binary\", \"hex\"')": ".error(\"无效编码. \" + value + '请使用一下编码方式之一: \"ascii\", \"utf8\", \"utf-8\", \"utf16le\", \"ucs2\", \"ucs-2\", \"base64\", \"latin1\", \"binary\", \"hex\"')",
    ".error(errorMSG)": ".error(MSG出错)",
    ".error(e)": ".error(e)",
    ".error(\"Error in 'Obsidian Execute Code' Plugin while removing file: \" + err)": ".error(\"在 'Obsidian Execute Code' 插件中移除文件时出错: \" + err)",
    ".error(err)": ".error(err)",
    "name: \"lexical\"": "name: \"lexical\"",
    "name : \"/\"": "name : \"/\"",
    "name: \"Open Code Runtime Management\"": "name: \"打开代码执行管理\"",
    "name: \"Run all Code Blocks in Current File\"": "name: \"运行当前文件中的所有代码块\"",
    "text: \"C++ Settings\"": "text: \"C++ 设置\"",
    "text: \"C Settings\"": "text: \"C 设置\"",
    "text: \"CSharp Settings\"": "text: \"CSharp 设置\"",
    "text: \"F# Settings\"": "text: \"F# 设置\"",
    "text: \"Golang Settings\"": "text: \"Golang 设置\"",
    "text: \"Groovy Settings\"": "text: \"Groovy 设置\"",
    "text: \"Haskell Settings\"": "text: \"Haskell 设置\"",
    "text: \"Java Settings\"": "text: \"Java 设置\"",
    "text: \"JavaScript / Node Settings\"": "text: \"JavaScript / Node 设置\"",
    "text: \"Kotlin Settings\"": "text: \"Kotlin 设置\"",
    "text: \"Lean Settings\"": "text: \"Lean 设置\"",
    "text: \"Lua Settings\"": "text: \"Lua 设置\"",
    "text: \"Dart Settings\"": "text: \"Dart 设置\"",
    "text: \"Wolfram Mathematica Settings\"": "text: \"Wolfram Mathematica 设置\"",
    "text: \"Powershell Settings\"": "text: \"Powershell 设置\"",
    "text: \"Prolog Settings\"": "text: \"Prolog 设置\"",
    "text: \"Python Settings\"": "text: \"Python 设置\"",
    "text: \"R Settings\"": "text: \"R 设置\"",
    "text: \"Ruby Settings\"": "text: \"Ruby 设置\"",
    "text: \"Rust Settings\"": "text: \"Rust 设置\"",
    "text: \"Scala Settings\"": "text: \"Scala 设置\"",
    "text: \"Racket Settings\"": "text: \"Racket 设置\"",
    "text: \"Shell Settings\"": "text: \"Shell 设置\"",
    "text: \"Batch Settings\"": "text: \"Batch 设置\"",
    "text: \"TypeScript Settings\"": "text: \"TypeScript 设置\"",
    "text: \"SQL Settings\"": "text: \"SQL 设置\"",
    "text: \"Octave Settings\"": "text: \"Octave 设置\"",
    "text: \"Maxima Settings\"": "text: \"Maxima 设置\"",
    "text: \"Applescript Settings\"": "text: \"Applescript 设置\"",
    "text: \"Zig Settings\"": "text: \"Zig 设置\"",
    "text: \"OCaml Settings\"": "text: \"OCaml 设置\"",
    "text: \"Swift Settings\"": "text: \"Swift 设置\"",
    "text: \"Settings for the Code Execution Plugin.\"": "text: \"代码执行插件设置\"",
    "text: \"General Settings\"": "text: \"通用设置\"",
    ".setText(\"Clear\")": ".setText(\"清空\")",
    ".setName(\"Cling path\")": ".setName(\"Cling 路径\")",
    ".setName(\"Cling arguments for C++\")": ".setName(\"Cling arguments for C++\")",
    ".setName(\"Cling std\")": ".setName(\"Cling std\")",
    ".setName(\"Use main function\")": ".setName(\"使用main功能\")",
    ".setName(\"gcc / Cling path\")": ".setName(\"gcc / Cling 路径\")",
    ".setName(\"gcc / Cling arguments for C\")": ".setName(\"gcc / Cling arguments for C\")",
    ".setName(\"Cling std (ignored for gcc)\")": ".setName(\"Cling std(为 gcc 设置忽略)\")",
    ".setName(\"Use main function (mandatory for gcc)\")": ".setName(\"使用主函数(gcc 必要)\")",
    ".setName(\"dotnet path\")": ".setName(\"dotnet 路径\")",
    ".setName(\"CSharp arguments\")": ".setName(\"CSharp 参数\")",
    ".setName(\"F# path\")": ".setName(\"F# 路径\")",
    ".setName(\"F# arguments\")": ".setName(\"F# 参数\")",
    ".setName(\"F# file extension\")": ".setName(\"F# 文件拓展名\")",
    ".setName(\"Golang Path\")": ".setName(\"Golang 路径\")",
    ".setName(\"Groovy path\")": ".setName(\"Groovy 路径\")",
    ".setName(\"Groovy arguments\")": ".setName(\"Groovy 参数\")",
    ".setName(\"Use Ghci\")": ".setName(\"使用 Ghci\")",
    ".setName(\"Ghci path\")": ".setName(\"Ghci 路径\")",
    ".setName(\"Rungch path\")": ".setName(\"Rungch 路径\")",
    ".setName(\"Ghc path\")": ".setName(\"Ghc 路径\")",
    ".setName(\"Java path (Java 11 or higher)\")": ".setName(\"Java路径(Java 11或更高版本)\")",
    ".setName(\"Java arguments\")": ".setName(\"Java 参数\")",
    ".setName(\"Node path\")": ".setName(\"Node 路径\")",
    ".setName(\"Node arguments\")": ".setName(\"Node 参数\")",
    ".setName(\"Run Javascript blocks in Notebook Mode\")": ".setName(\"在Notebook模式下运行JavaScript代码块\")",
    ".setName(\"Kotlin path\")": ".setName(\"Kotlin 路径\")",
    ".setName(\"Kotlin arguments\")": ".setName(\"Kotlin 参数\")",
    ".setName(\"lean path\")": ".setName(\"lean 路径\")",
    ".setName(\"Lean arguments\")": ".setName(\"Lean 参数\")",
    ".setName(\"lua path\")": ".setName(\"lua 路径\")",
    ".setName(\"Lua arguments\")": ".setName(\"Lua 参数\")",
    ".setName(\"dart path\")": ".setName(\"dart 路径\")",
    ".setName(\"Dart arguments\")": ".setName(\"Dart 参数\")",
    ".setName(\"Mathematica path\")": ".setName(\"Mathematica 路径\")",
    ".setName(\"Mathematica arguments\")": ".setName(\"Mathematica 参数\")",
    ".setName(\"Powershell path\")": ".setName(\"Powershell 路径\")",
    ".setName(\"Powershell arguments\")": ".setName(\"Powershell 参数\")",
    ".setName(\"Powershell file extension\")": ".setName(\"Powershell file extension\")",
    ".setName(\"PowerShell script encoding\")": ".setName(\"PowerShell 脚本编码\")",
    ".setName(\"Prolog Answer Limit\")": ".setName(\"Prolog 回答限制\")",
    ".setName(\"Embed Python Plots\")": ".setName(\"嵌入Python绘图\")",
    ".setName(\"Python path\")": ".setName(\"Python 路径\")",
    ".setName(\"Python arguments\")": ".setName(\"Python 参数\")",
    ".setName(\"Run Python blocks in Notebook Mode\")": ".setName(\"在Notebook模式下运行Python代码块\")",
    ".setName(\"Embed R Plots created via `plot()` into Notes\")": ".setName(\"将通过 `plot()` 创建的 R 图嵌入到笔记中\")",
    ".setName(\"Rscript path\")": ".setName(\"Rscript 路径\")",
    ".setName(\"R arguments\")": ".setName(\"R 参数\")",
    ".setName(\"Run R blocks in Notebook Mode\")": ".setName(\"在Notebook模式下运行R代码块\")",
    ".setName(\"ruby path\")": ".setName(\"ruby 路径\")",
    ".setName(\"ruby arguments\")": ".setName(\"ruby 参数\")",
    ".setName(\"Cargo Path\")": ".setName(\"Cargo 路径\")",
    ".setName(\"scala path\")": ".setName(\"scala 路径\")",
    ".setName(\"Scala arguments\")": ".setName(\"Scala 参数\")",
    ".setName(\"racket path\")": ".setName(\"racket 路径\")",
    ".setName(\"Racket arguments\")": ".setName(\"Racket 参数\")",
    ".setName(\"Shell path\")": ".setName(\"Shell 路径\")",
    ".setName(\"Shell arguments\")": ".setName(\"Shell 参数\")",
    ".setName(\"Shell file extension\")": ".setName(\"Shell file extension\")",
    ".setName(\"Shell WSL mode\")": ".setName(\"Shell WSL 模式\")",
    ".setName(\"Batch path\")": ".setName(\"Batch 路径\")",
    ".setName(\"Batch arguments\")": ".setName(\"Batch 参数\")",
    ".setName(\"Batch file extension\")": ".setName(\"Batch file extension\")",
    ".setName(\"ts-node path\")": ".setName(\"ts-node 路径\")",
    ".setName(\"TypeScript arguments\")": ".setName(\"TypeScript 参数\")",
    ".setName(\"SQL path\")": ".setName(\"SQL 路径\")",
    ".setName(\"SQL arguments\")": ".setName(\"SQL 参数\")",
    ".setName(\"Octave path\")": ".setName(\"Octave 路径\")",
    ".setName(\"Octave arguments\")": ".setName(\"Octave 参数\")",
    ".setName(\"Maxima path\")": ".setName(\"Maxima 路径\")",
    ".setName(\"Maxima arguments\")": ".setName(\"Maxima 参数\")",
    ".setName(\"Osascript path\")": ".setName(\"Osascript 路径\")",
    ".setName(\"Applescript arguments\")": ".setName(\"Applescript 参数\")",
    ".setName(\"zig path\")": ".setName(\"zig 路径\")",
    ".setName(\"zig arguments\")": ".setName(\"zig 参数\")",
    ".setName(\"ocaml path\")": ".setName(\"ocaml 路径\")",
    ".setName(\"ocaml arguments\")": ".setName(\"ocaml 参数\")",
    ".setName(\"Swift path\")": ".setName(\"Swift 路径\")",
    ".setName(\"Swift arguments\")": ".setName(\"Swift 配置\")",
    ".setName(\"Timeout (in seconds)\")": ".setName(\"超时（秒）\")",
    ".setName(\"Allow Input\")": ".setName(\"允许输入\")",
    ".setName(\"WSL Mode\")": ".setName(\"WSL 模式\")",
    ".setName(\"Only Current Log\")": ".setName(\"仅当前日志\")",
    ".setName(\"Language-Specific Settings\")": ".setName(\"语言特定设置\")",
    ".setName(`Inject ${languageAlt} code`)": ".setName(`注入 ${languageAlt} 代码`)",
    ".setDesc(\"The path to your Cling installation.\")": ".setDesc(\"您 Cling 安装的路径.\")",
    ".setDesc(\"If enabled, will use a main() function as the code block entrypoint.\")": ".setDesc(\"如果启用，将使用 main() 函数作为代码块的开始.\")",
    ".setDesc(\"The path to your gcc / Cling installation.\")": ".setDesc(\"您的gcc / Cling安装路径\")",
    ".setDesc(\"The path to dotnet.\")": ".setDesc(\"您的 dotnet 路径.\")",
    ".setDesc(\"Changes the file extension for generated F# scripts.\")": ".setDesc(\"更改生成的 F# 脚本的文件扩展名.\")",
    ".setDesc(\"The path to your Golang installation.\")": ".setDesc(\"您的 Golang 安装路径.\")",
    ".setDesc(\"The path to your Groovy installation.\")": ".setDesc(\"您的 Groovy 安装路径.\")",
    ".setDesc(\"Run haskell code with ghci instead of runghc\")": ".setDesc(\"使用 ghci 运行 Haskell 代码而不是 runghc\")",
    ".setDesc(\"The path to your ghci installation.\")": ".setDesc(\"您的 ghci 安装路径.\")",
    ".setDesc(\"The path to your runghc installation.\")": ".setDesc(\"您的 runghc 安装路径.\")",
    ".setDesc(\"The Ghc path your runghc installation will call.\")": ".setDesc(\"您的 runghc 安装将调用的 Ghc 的路径.\")",
    ".setDesc(\"The path to your Java installation.\")": ".setDesc(\"您的 Java 安装路径.\")",
    ".setDesc(\"The path to your Kotlin installation.\")": ".setDesc(\"您的 Kotlin 安装路径.\")",
    ".setDesc(\"The path to your Mathematica installation.\")": ".setDesc(\"您的 Mathematica 安装路径.\")",
    ".setDesc(\"The path to Powershell.\")": ".setDesc(\"您的PowerShell路径.\")",
    ".setDesc(\"Changes the file extension for generated shell scripts. This is useful if you don't want to use PowerShell.\")": ".setDesc(\"更改生成的 shell 脚本的文件扩展名。如果您不想使用 PowerShell，这非常有用.\")",
    ".setDesc(\"Maximal number of answers to be returned by the Prolog engine. tab is to prevent creating too huge texts in the notebook.\")": ".setDesc(\"Prolog引擎返回的最大答案数量.tab用于防止在笔记本中生成过大的文本.\")",
    ".setDesc(\"The path to your Python installation.\")": ".setDesc(\"您的 Python 安装路径.\")",
    ".setDesc(\"The path to your Rscript installation. Ensure you provide the Rscript binary instead of the ordinary R binary.\")": ".setDesc(\"Rscript安装路径。确保提供的是Rscript二进制文件，而不是普通的R二进制文件.\")",
    ".setDesc(\"Path to your ruby installation\")": ".setDesc(\"您的 Ruby 安装路径\")",
    ".setDesc(\"The path to your Cargo installation.\")": ".setDesc(\"您的 Cargo 安装路径\")",
    ".setDesc(\"Path to your scala installation\")": ".setDesc(\"您的 Scala 安装路径\")",
    ".setDesc(\"Path to your racket installation\")": ".setDesc(\"您的 racket 安装路径\")",
    ".setDesc(\"The path to shell. Default is Bash but you can use any shell you want, e.g. bash, zsh, fish, ...\")": ".setDesc(\"shell的路径。默认是Bash，但您可以使用任何您想要的shell，例如bash、zsh、fish等...\")",
    ".setDesc(\"Changes the file extension for generated shell scripts. This is useful if you want to use a shell other than bash.\")": ".setDesc(\"更改生成的 shell 脚本的文件扩展名。如果您想使用除 bash 之外的其他 shell，这非常有用.\")",
    ".setDesc('Run the shell script in Windows Subsystem for Linux. This option is used if the global \"WSL Mode\" is disabled.')": ".setDesc('在Windows子系统Linux中运行Shell脚本。如果全局\"WSL模式\"被禁用，则使用此选项.')",
    ".setDesc(\"The path to the terminal. Default is command prompt.\")": ".setDesc(\"终端路径，默认为命令提示符.\")",
    ".setDesc(\"Changes the file extension for generated batch scripts. Default is .bat\")": ".setDesc(\"更改生成的批处理脚本的文件扩展名。默认是 .bat\")",
    ".setDesc(\"Path to your SQL installation. You can select the SQL dialect you prefer but you need to set the right arguments by yourself.\")": ".setDesc(\"您的 SQL 安装路径。您可以选择您喜欢的 SQL 方言，但您需要自行设置正确的参数。\")",
    ".setDesc(\"Set the right arguments for your database.\")": ".setDesc(\"为您的数据库设置正确的参数。\")",
    ".setDesc(\"The path to your Octave installation.\")": ".setDesc(\"您的 Octave 安装路径。\")",
    ".setDesc(\"The path to your Maxima installation.\")": ".setDesc(\"您的 Maxima 安装路径。\")",
    ".setDesc(\"The path to your osascript installation (only available on MacOS).\")": ".setDesc(\"您的 osascript 安装路径(仅适用于 MacOS).\")",
    ".setDesc(\"Path to your zig installation\")": ".setDesc(\"您的 Zig 安装路径\")",
    ".setDesc(\"Path to your ocaml installation\")": ".setDesc(\"您的 OCaml 安装路径\")",
    ".setDesc(\"The path to your Swift installation.\")": ".setDesc(\"您的 Swift 安装路径。\")",
    ".setDesc(\"The time after which a program gets shut down automatically. This is to prevent infinite loops. \")": ".setDesc(\"程序将在此时间后将自动关闭，以防止无限循环。\")",
    ".setDesc(\"Whether or not to include a stdin input box when running blocks. In order to apply changes to this, Obsidian must be refreshed. \")": ".setDesc(\"在运行块时是否包含一个标准输入框。要应用对此的更改，必须刷新 Obsidian.\")",
    ".setDesc(\"Whether or not to run code in the Windows Subsystem for Linux. If you don't have WSL installed, don't turn this on!\")": ".setDesc(\"是否在Windows子系统Linux中运行代码。如果您没有安装WSL,请不要开启此选项!\")",
    ".setDesc(\"Whether or not show print log only in current code block.\")": ".setDesc(\"是否仅在当前代码块中显示打印日志\")",
    ".setDesc(\"Pick a language to edit its language-specific settings\")": ".setDesc(\"选择一种语言以编辑其特定语言设置\")",
    ".setDesc(`Code to add to the top of every ${languageAlt} code block before running.`)": ".setDesc(`在运行之前，添加到每个 ${languageAlt} 代码块顶部的代码`)",
    ".renderMarkdown(\"```\" + l + \"\\n\" + src + (src.endsWith(\"\\n\")": ".renderMarkdown(\"```\" + l + \"\\n\" + src + (src.endsWith(\"\\n\")",
    ".setName(\"gcc / Cling arguments for C \")": ".setName(\"gcc / Cling 配置用于 C 语言\")",
    "": ""
  }
}
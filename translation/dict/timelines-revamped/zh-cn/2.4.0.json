{
    "manifest": {
        "translationVersion": 1734358644878,
        "pluginVersion": "2.4.0"
    },
    "description": {
        "original": "Successor to darakah's Timelines plugin: Generate a chronological timeline in which all 'events' are notes that include a specific tag or set of tags.",
        "translation": "继 darakah 的 Timelines 插件之后：生成一个时间顺序的时间轴，其中所有“事件”都是包含特定标签或标签集的笔记。"
    },
    "dict": {
        "Notice(`No date found for ${file.name}`)": "Notice(`未找到 ${file.name} 的日期`)",
        ".log(message, object !== null && object !== void 0 ? object : '')": ".log(消息, 对象 !== null && 对象 !== void 0 ? 对象 : '')",
        ".log(other)": ".log(其他)",
        ".log(array)": ".log(数组)",
        ".log(pulled)": ".log(拉取的)",
        ".log(evens)": ".log(事件)",
        ".log(value)": ".log(值)",
        ".log(key)": ".log(键)",
        ".log(_.now()": ".log(_.现在()",
        ".log('done saving!')": ".log('保存完成！')",
        ".log(text)": ".log(文本)",
        ".log(_.castArray(array)": ".log(_.castArray(数组)",
        ".log(shallow[0] === objects[0])": ".log(浅层[0] === 对象[0])",
        ".log(el === document.body)": ".log(el === document.body)",
        ".log(el.nodeName)": ".log(el.nodeName)",
        ".log(el.childNodes.length)": ".log(el.childNodes.length)",
        ".log(deep[0] === objects[0])": ".log(深层[0] === 对象[0])",
        ".log(object.a[0].b.c)": ".log(对象.a[0].b.c)",
        ".log(object.x[0].y.z)": ".log(对象.x[0].y.z)",
        ".log(object)": ".log(对象)",
        ".log('clicked ' + this.label)": ".log('点击了 ' + this.label)",
        ".log(objects)": ".log(对象们)",
        ".log(objects[0] === objects[1])": ".log(对象们[0] === 对象们[1])",
        ".log(_.identity(object)": ".log(_.identity(对象)",
        ".log(arrays)": ".log(数组们)",
        ".log(arrays[0] === arrays[1])": ".log(数组们[0] === 数组们[1])",
        " log(min)": " log(最小值)",
        " log(max)": " log(最大值)",
        " log(\n          'Invalid option detected in \"' +\n            option +\n            '\".' +\n            \" Allowed values are:\" +\n            Validator.print(refOptionType)": " log(\n          '检测到无效选项在 \"' +\n            选项 +\n            '\".' +\n            \" 允许的值是:\" +\n            Validator.print(refOptionType)",
        " log(\n        'Invalid type received for \"' +\n          option +\n          '\". Expected: ' +\n          Validator.print(Object.keys(refOptionObj)": " log(\n        '接收到无效类型在 \"' +\n          选项 +\n          '\". 预期: ' +\n          Validator.print(Object.keys(refOptionObj)",
        ".log('event', event, properties)": ".log('事件', 事件, 属性)",
        ".log('ids', ids)": ".log('ID', ID)",
        ".log('item1', item1)": ".log('项目1', 项目1)",
        ".log('filtered items', items)": ".log('过滤后的项目', 项目)",
        ".log(ids)": ".log(ID)",
        ".log(\"Wrong repeat format, allowed are: daily, weekly, monthly, yearly. Given:\", hiddenDates[i].repeat)": ".log(\"错误的重复格式，允许的有：每日，每周，每月，每年。 给定的:\", hiddenDates[i].repeat)",
        ".log('WARNING: infinite loop in redraw?')": ".log('警告: 重绘中的无限循环？')",
        ".log(100 / scale)": ".log(100 / 比例)",
        ".log(granularity)": ".log(粒度)",
        ".log('%c' + message + Validator.printLocation(path, option)": ".log('%c' + 消息 + Validator.printLocation(路径, 选项)",
        " log('Invalid option detected in \"' + option + '\".' +\n          ' Allowed values are:' + Validator.print(refOptionType)": " log('检测到无效选项在 \"' + 选项 + '\".' +\n          ' 允许的值是:' + Validator.print(refOptionType)",
        " log('Invalid type received for \"' + option +\n        '\". Expected: ' + Validator.print(Object.keys(refOptionObj)": " log('接收到无效类型在 \"' + 选项 +\n        '\". 预期: ' + Validator.print(Object.keys(refOptionObj)",
        ".log('%cUnknown option detected: \"' + option + '\"' + msg, printStyle)": ".log('%c检测到未知选项: \"' + 选项 + '\"' + 消息, 打印样式)",
        ".log('%cErrors have been found in the supplied options object.', printStyle)": ".log('%c在提供的选项对象中发现错误。', 打印样式)",
        ".log(range)": ".log(范围)",
        ".log(group.id + \": Unknown shading group target given:\" + subGroupId)": ".log(组.id + \": 给定的未知阴影组目标:\" + 子组ID)",
        ".log(`Initializing Plugin: ${this.pluginName}`)": ".log(`初始化插件: ${this.pluginName}`)",
        ".log(`Loaded Plugin: ${this.pluginName}`)": ".log(`加载插件: ${this.pluginName}`)",
        ".log(`Unloaded Plugin: ${this.pluginName}`)": ".log(`卸载插件: ${this.pluginName}`)",
        ".error(\"buildTimelineDate | Couldn't create a luxon date string!\")": ".error(\"buildTimelineDate | 无法创建 luxon 日期字符串！\")",
        ".error(`Invalid timeframe: ${timeframe}`)": ".error(`无效的时间范围: ${timeframe}`)",
        ".error(t)": ".error(t)",
        ".error(t,e)": ".error(t,e)",
        ".error(\"If you see this, report it please.\")": ".error(\"如果您看到这个，请报告。\")",
        ".error(\"dont know how to handle\", item, subObj, newPath)": ".error(\"不知道如何处理\", 项目, 子对象, 新路径)",
        ".error(\n        \"%c\" + message + Validator.printLocation(path, option)": ".error(\n        \"%c\" + 消息 + Validator.printLocation(路径, 选项)",
        ".error(\n      '%cUnknown option detected: \"' + option + '\"' + msg,\n      VALIDATOR_PRINT_STYLE$1\n    )": ".error(\n      '%c检测到未知选项: \"' + 选项 + '\"' + 消息,\n      VALIDATOR_PRINT_STYLE$1\n    )",
        ".error(\n        'Notes: cannot use these two options \"stripIgnoreTag\" and \"onIgnoreTag\" at the same time'\n      )": ".error(\n        '注意: 不能同时使用这两个选项 \"stripIgnoreTag\" 和 \"onIgnoreTag\"'\n      )",
        ".error('dont know how to handle', item, subObj, newPath)": ".error('不知道如何处理', 项目, 子对象, 新路径)",
        ".error(\"Couldn't build a start date for timeline on vertical timeline\")": ".error(\"无法为垂直时间轴构建起始日期\")",
        ".error(\"There's no last timeline date\")": ".error(\"没有最后的时间轴日期\")",
        ".error(\"Cannot normalize the event's start date! Skipping\")": ".error(\"无法规范化事件的起始日期！跳过\")",
        "name: '+name);\n\t    };\n\n\t    input$5.autodetect.push({\n\t        p: 5,\n\t        test: function (h) {\n\t            var rest = [], len = arguments.length - 1;\n\t            while ( len-- > 0 ) rest[ len ] = arguments[ len + 1 ];\n\n\t            if (!rest.length && type$c(h) === '": "name: '+名称);\n\t    };\n\n\t    input$5.autodetect.push({\n\t        p: 5,\n\t        test: function (h) {\n\t            var 其余 = [], 长度 = arguments.length - 1;\n\t            while ( 长度-- > 0 ) 其余[ 长度 ] = arguments[ 长度 + 1 ];\n\n\t            if (!其余.length && type$c(h) === '",
        "name:\"isRegisteredSymbol\"": "name:\"是否已注册符号\"",
        "name:\"isWellKnownSymbol\"": "name:\"是否为知名符号\"",
        "name:\"flush\"": "name:\"刷新\"",
        "name: 'Anno Domini'": "name: '公元后'",
        "name: 'Before Christ'": "name: '公元前'",
        "name: \"flush\"": "name: \"刷新\"",
        "name: 'Render static timeline'": "name: '渲染静态时间轴'",
        "name: 'Insert timeline event'": "name: '插入时间轴事件'",
        "name: 'Insert timeline event (frontmatter)'": "name: '插入时间轴事件（元信息）'",
        "name: 'Reload current note'": "name: '重新加载当前笔记'",
        "description: '',\n                startDate: '": "description: '',\n                startDate: '",
        "text: 'item 1'": "text: '项目 1'",
        "text: 'item 2'": "text: '项目 2'",
        "text: 'item 3'": "text: '项目 3'",
        "text: 'item 4'": "text: '项目 4'",
        "text: 'item without an id'": "text: '没有 ID 的项目'",
        "text: 'item 2 (updated)'": "text: '项目 2（已更新）'",
        "text: 'item 4 (new)'": "text: '项目 4（新）'",
        "text:'',style:'": "text:'',style:'",
        "text: 'Customize frontmatter keys'": "text: '自定义元信息键'",
        "text: `Specify the front matter keys used to extract start dates, end dates,\n         and titles for the timeline notes. Defaults to 'start-date', 'end-date', and 'title'.`": "text: `指定用于提取起始日期、结束日期和时间轴笔记标题的元信息键。默认值为 'start-date'、'end-date' 和 'title'。`",
        "text: 'Developer tools'": "text: '开发者工具'",
        "text: '', });\n            this.updateStatusBarText(plugin);\n            plugin.registerEvent(plugin.app.workspace.on('": "text: '', });\n            this.updateStatusBarText(plugin);\n            plugin.registerEvent(plugin.app.workspace.on('",
        ".setText('New Event')": ".setText('新事件')",
        ".setName('Default timeline tag')": ".setName('默认时间轴标签')",
        ".setName('Chronological direction')": ".setName('时间顺序方向')",
        ".setName('Event element tag (HTML)')": ".setName('事件元素标签 (HTML)')",
        ".setName('Maximum padding on dates')": ".setName('日期最大间距')",
        ".setName('Show event counter')": ".setName('显示事件计数器')",
        ".setName('Display note preview on hover')": ".setName('悬停时显示笔记预览')",
        ".setName('Vertical Timeline Date Display Format')": ".setName('垂直时间轴日期显示格式')",
        ".setName('Start date keys')": ".setName('起始日期键')",
        ".setName('End date keys')": ".setName('结束日期键')",
        ".setName('Title keys')": ".setName('标题键')",
        ".setName('Debug mode')": ".setName('调试模式')",
        ".setDesc('Tag to specify which notes to include in created timelines e.g. timeline for #timeline tag')": ".setDesc('指定要在时间轴中包含哪些笔记的标签，例如用于 #timeline 标签的时间轴')",
        ".setDesc('When enabled, events will be sorted from old to new. Turn this setting off to sort from new to old.')": ".setDesc('启用后，事件将按从旧到新的顺序排序。关闭此设置则按从新到旧排序。')",
        ".setDesc(`Default: div. Acceptable values are: ${acceptableValuesString}`)": ".setDesc(`默认值: div。 可接受的值有: ${acceptableValuesString}`)",
        ".setDesc(`Default: on. Adds an element to the editor status bar showing the total number\n        of events in the current file. Helpful for vaults with lots of events.`)": ".setDesc(`默认值: 开启。 在编辑器状态栏中添加一个元素，显示当前文件中的事件总数。 这对于包含大量事件的库很有帮助。`)",
        ".setDesc('When enabled, linked notes will display as a pop up when hovering over an event in the timeline.')": ".setDesc('启用后，悬停在时间轴事件上时，链接的笔记将作为弹出窗口显示。')",
        ".setDesc(`Specify the format for the date displayed in the vertical timeline. Check the docs\n        for information on acceptable formatting tokens.`)": ".setDesc(`指定垂直时间轴中显示的日期格式。 请查看文档，了解可接受的格式标记。`)",
        ".setDesc('Comma-separated list of frontmatter keys for start date. Example: start-date,fc-date')": ".setDesc('用于起始日期的元信息键的逗号分隔列表。例如：start-date,fc-date')",
        ".setDesc('Comma-separated list of frontmatter keys for end date.')": ".setDesc('用于结束日期的元信息键的逗号分隔列表。')",
        ".setDesc('Comma-separated list of frontmatter keys for title.')": ".setDesc('用于标题的元信息键的逗号分隔列表。')",
        ".setDesc(`If you are having an issue or have been asked to look at the logs, turn this on to see logs in the console.\n        Debug mode will default to off on plugin load and the current value will not be saved.`)": ".setDesc(`如果您遇到了问题或被要求查看日志，请启用此选项以在控制台中查看日志。\n        调试模式在加载插件时默认关闭，当前值不会被保存。`)",
        ".innerText = \"Error: your browser does not support HTML canvas\"": ".innerText = \"错误：您的浏览器不支持 HTML 画布\"",
        ".innerText = \"brightness:\"": ".innerText = \"亮度:\"",
        ".innerText = \"opacity:\"": ".innerText = \"不透明度:\"",
        ".innerText = \"new\"": ".innerText = \"新建\"",
        ".innerText = \"initial\"": ".innerText = \"初始值\"",
        ".innerText = \"cancel\"": ".innerText = \"取消\"",
        ".innerText = \"apply\"": ".innerText = \"应用\"",
        ".innerText = \"save\"": ".innerText = \"保存\"",
        ".innerText = \"load last\"": ".innerText = \"加载上次\"",
        ".innerText = \"generate options\"": ".innerText = \"生成选项\""
    }
}
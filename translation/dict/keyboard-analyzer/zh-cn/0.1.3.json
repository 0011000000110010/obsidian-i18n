{
    "manifest": {
        "translationVersion": 1731978795631,
        "pluginVersion": "0.1.3"
    },
    "description": {
        "original": "See and analyse your keyboard hotkeys and shortcuts",
        "translation": "查看和分析您的键盘快捷键"
    },
    "dict": {
        ".log(\"Attaching listener to element\", id, element)": ".log(\"正在为元素附加监听器\", id, element)",
        ".log(id, \"Not detectable.\")": ".log(id, \"不可检测。\")",
        ".log(id, \"System busy making it detectable\")": ".log(id, \"系统正在使其可检测\")",
        ".log(id, \"Making detectable...\")": ".log(id, \"正在使其可检测...\")",
        ".log(id, \"Element uninstalled before being detectable.\")": ".log(id, \"元素在可检测之前已被卸载。\")",
        ".log(id, \"Already detecable, adding listener.\")": ".log(id, \"已可检测，正在添加监听器。\")",
        ".log('unknown modifier: ', e.key)": ".log('未知修饰符: ', e.key)",
        ".log('please report this to the developer')": ".log('请将此报告给开发者')",
        ".log('unknown key: ', JavaSciptKeyCodes[e.keyCode])": ".log('未知键: ', JavaSciptKeyCodes[e.keyCode])",
        ".log('unknown key: ', e.key)": ".log('未知键: ', e.key)",
        ".log('filter: ', filterIsOpen)": ".log('过滤器: ', filterIsOpen)",
        ".error(\"[scroll] Don't know how to add event listeners.\")": ".error(\"[scroll] 不知道如何添加事件监听器。\")",
        ".error(\"[scroll] Don't know how to remove event listeners.\")": ".error(\"[scroll] 不知道如何移除事件监听器。\")",
        ".error(\"Invalid arguments. Must be a DOM element or a collection of DOM elements.\")": ".error(\"无效参数。必须是一个 DOM 元素或一组 DOM 元素。\")",
        ".error(\"At least one element is required.\")": ".error(\"至少需要一个元素。\")",
        "name: \"coffee\"": "name: \"咖啡\"",
        "name: 'Open keyboard shortcuts view'": "name: '打开键盘快捷键视图'",
        "text: 'Settings for my awesome plugin.'": "text: '我的插件设置'",
        ".setName('Show Status Bar Item')": ".setName('显示状态栏项目')",
        ".setDesc('Show the status bar item')": ".setDesc('显示状态栏项目')",
        "Error(String(it) + ' is not a function')": "Error(String(it) + ' 不是函数')",
        "Error(String(it) + ' is not an object')": "Error(String(it) + ' 不是对象')",
        "Error('Incompatible receiver, ' + TYPE + ' required')": "Error('不兼容的接收者,' + TYPE + ' 需要')",
        "Error('Accessors not supported')": "Error('不支持访问器')",
        "Error(\"Can't call method on \" + it)": "Error(\"无法在 \" + it + \" 上调用方法\")",
        "Error(\"Can't convert object to primitive value\")": "Error(\"无法将对象转换为原始值\")",
        "Error(\"Can't set \" + String(proto) + ' as a prototype')": "Error(\"无法将 \" + String(proto) + ' 设置为原型')",
        "Error('`feather.replace()` only works in a browser environment.')": "Error('`feather.replace()` 只能在浏览器环境中使用。')",
        "Error('The required `key` (icon name) parameter is missing.')": "Error('必需的 `key`（图标名称）参数缺失。')",
        "Error('No icon matching \\'' + name + '\\'. See the complete list of icons at https://feathericons.com')": "Error('没有匹配的图标 \\'' + name + '\\'. 请参阅完整图标列表：https://feathericons.com')",
        "warn('feather.toSvg() is deprecated. Please use feather.icons[name].toSvg() instead.')": "warn('feather.toSvg() 已废弃。请改用 feather.icons[name].toSvg()。')",
        "Error('Function called outside component initialization')": "Error('函数在组件初始化外部被调用')",
        "Error(\"setId required the element to have a resize detection state.\")": "Error(\"setId 需要元素具有大小检测状态。\")",
        "warn(\"Invalid options combination. auto=true and async=false is invalid. Setting async=true.\")": "warn(\"无效的选项组合。auto=true 和 async=false 是无效的。设置 async=true。\")",
        "Error(\"Missing required dependency: reporter.\")": "Error(\"缺少必需的依赖项：reporter。\")",
        "Error(\"Element is not detectable by this strategy.\")": "Error(\"元素在此策略下不可检测。\")",
        "warn(\"An element that is positioned static has style.\" + property + \"=\" + value + \" which is ignored due to the static positioning. The element will need to be positioned relative, so the style.\" + property + \" will be set to 0. Element: \", element)": "warn(\"定位为静态的元素具有 style.\" + property + \"=\" + value + \"，由于静态定位而被忽略。元素需要定位为相对，因此 style.\" + property + \" 将被设置为 0。元素: \", element)",
        "Error(\"Missing required dependency: batchProcessor\")": "Error(\"缺少必需的依赖项：batchProcessor\")",
        "Error(\"Cannot add listener to an element that is not detectable.\")": "Error(\"无法为不可检测的元素添加监听器。\")",
        "debug(\"Element start size\"": "debug(\"元素初始大小\"",
        "debug(\"storeStyle invoked.\")": "debug(\"storeStyle 被调用。\")",
        "debug(\"Aborting because element has been uninstalled\")": "debug(\"因元素已被卸载而终止\")",
        "debug(\"Injecting elements\")": "debug(\"注入元素\")",
        "debug(\"Aborting expand scroll handler: element has been uninstalled\")": "debug(\"终止扩展滚动处理器：元素已被卸载\")",
        "debug(\"Aborting shrink scroll handler: element has been uninstalled\")": "debug(\"终止收缩滚动处理器：元素已被卸载\")",
        "debug(\"Storing current size\"": "debug(\"存储当前大小\"",
        "debug(\"Aborting because element container has not been initialized\")": "debug(\"因元素容器未初始化而终止\")",
        "warn(idHandler.get(element), \"Scroll: Size changed before updating detector elements.\")": "warn(idHandler.get(element), \"滚动：在更新检测器元素之前大小已改变。\")",
        "ebug(\"notifyListenersIfNeeded invoked\")": "debug(\"notifyListenersIfNeeded 被调用\")",
        "debug(\"Not notifying: Size is the same as the start size, and there has been no notification yet.\")": "debug(\"不通知：大小与初始大小相同，且尚未发出通知。\")",
        "debug(\"Not notifying: Size already notified\")": "debug(\"不通知：大小已通知\")",
        "debug(\"Current size not notified, notifying...\")": "debug(\"当前大小未通知，正在通知...\")",
        "debug(\"startanimation triggered.\")": "debug(\"startanimation 触发。\")",
        "debug(\"Ignoring since element is still unrendered...\")": "debug(\"忽略：元素仍处于未渲染状态...\")",
        "debug(\"Element rendered.\")": "debug(\"元素已渲染。\")",
        "debug(\"Scrollbars out of sync. Updating detector elements...\")": "debug(\"滚动条不同步。正在更新检测器元素...\")",
        "debug(\"Scroll detected.\")": "debug(\"检测到滚动。\")",
        "debug(\"Scroll event fired while unrendered. Ignoring...\")": "debug(\"未渲染状态下触发了滚动事件。忽略...\")",
        "debug(\"registerListenersAndPositionElements invoked.\")": "debug(\"registerListenersAndPositionElements 被调用。\")",
        "debug(\"finalizeDomMutation invoked.\")": "debug(\"finalizeDomMutation 被调用。\")",
        "debug(\"Installing...\")": "debug(\"正在安装...\")",
        "debug(\"Making detectable...\")": "debug(\"正在使其可检测...\")",
        "debug(\"Element is detached\")": "debug(\"元素已分离\")",
        "debug(\"Waiting until element is attached...\")": "debug(\"等待元素被附加...\")",
        "debug(\"Element is now attached\")": "debug(\"元素现已附加\")",
        "warn(\"Scroll strategy is not supported on legacy Opera. Changing to object strategy.\")": "warn(\"Scroll 策略不支持旧版 Opera。切换到 object 策略。\")",
        "warn(\"Scroll strategy is not supported on IE9. Changing to object strategy.\")": "warn(\"Scroll 策略不支持 IE9。切换到 object 策略。\")",
        "Error(\"Invalid strategy name: \" + desiredStrategy)": "Error(\"无效的策略名称: \" + desiredStrategy)",
        "Error(\"At least one element required.\")": "Error(\"至少需要一个元素。\")",
        "Error(\"Listener required.\")": "Error(\"需要监听器。\")",
        "textContent = \"Display featured first\"": "textContent = \"优先显示特色\"",
        "textContent = \"Strict Search\"": "textContent = \"严格搜索\"",
        "textContent = \"Highlight custom hotkeys\"": "textContent = \"高亮自定义快捷键\"",
        "textContent = \"Highlight hotkey duplicates\"": "textContent = \"高亮重复快捷键\"",
        "textContent = \"Display command ID's\"": "textContent = \"显示命令 ID\"",
        "textContent = \"Hotkeys not found\"": "textContent = \"未找到快捷键\"",
        "\"Filter...\"": "\"筛选...\"",
        "'Press Esc to deactivate key listener'": "'按 Esc 键停用键盘监听器'",
        "`Press ${getConvertedModifiers(['Mod'])[0]}+F or long press to activate key listener`": "`按 ${getConvertedModifiers(['Mod'])[0]}+F 或长按以激活键盘监听器`",
        "\"Filter Commands\"": "\"筛选命令\"",
        "\"Refresh Commands\"": "\"刷新命令\"",
        "'Keyboard Shortcuts'": "'键盘快捷键'",
        "\" keys | \"": "\" 快捷键 | \"",
        "\" cmds\"": "\" 命令\""
    }
}
{
    "manifest": {
        "translationVersion": 1731317175478,
        "pluginVersion": "1.4.1"
    },
    "description": {
        "original": "Streamline workflows within Obsidian, managing memos and plugins with just one command.",
        "translation": "简化Obsidian中的工作流程，只需一个命令即可管理备忘录和插件。"
    },
    "dict": {
        "Notice(\"AI is not available.\")": "Notice(\"AI 不可用。\")",
        "Notice(\"Prepare LLM failed!\",3e3)": "Notice(\"准备 LLM 失败！\",3e3)",
        "Notice(`disable plugin[${r.name}] successfully`)": "Notice(`成功禁用插件[${r.name}]`)",
        "Notice(`disable plugin[${r.name}] failed, try it again`)": "Notice(`禁用插件[${r.name}]失败，请重试`)",
        "Notice(`enable plugin[${r.name}] successfully`)": "Notice(`成功启用插件[${r.name}]`)",
        "Notice(`enable plugin[${r.name}] failed, try it again`)": "Notice(`启用插件[${r.name}]失败，请重试`)",
        "Notice(\"hover local graph failed\")": "Notice(\"悬停局部图失败\")",
        "Notice(`Can't work correctly! Plugin ${n} missing`)": "Notice(`无法正常工作！缺少插件 ${n}`)",
        "Notice(\"got some network issue when accessing github.com\",500)": "Notice(\"访问 github.com 时出现网络问题\",500)",
        "Notice(\"Tips: please switch to edit mode to insert\",5e3)": "Notice(\"提示：请切换到编辑模式以插入\",5e3)",
        "Notice(\"Error: not a editable markdown file\",5e3)": "Notice(\"错误：不是可编辑的 Markdown 文件\",5e3)",
        "Notice(\"starting obsidian assistant\")": "Notice(\"启动 Obsidian 助手\")",
        "Notice(\"update metadata command is not enabled in setting tab\")": "Notice(\"更新元数据命令未在设置选项卡中启用\")",
        "name:\"Button\"": "name:\"按钮\"",
        "name:\"ActionIcon\"": "name:\"动作图标\"",
        "name:\"IconRenderer\"": "name:\"图标渲染器\"",
        "name:\"Text\"": "name:\"文本\"",
        "name:\"Notification\"": "name:\"通知\"",
        "name:\"Timeline\"": "name:\"时间线\"",
        "name:\"TimelineItem\"": "name:\"时间线项\"",
        "name:\"start\"": "name:\"开始\"",
        "name:\"end\"": "name:\"结束\"",
        "name:\"error\"": "name:\"错误\"",
        "name:\"text\"": "name:\"文本\"",
        "name:`${this.getName()}Input`": "name:`${this.getName()}输入`",
        "name:`${this.getName()}Output`": "name:`${this.getName()}输出`",
        "name:\"PBKDF2\"": "name:\"密码强化算法\"",
        "name:\"Open specific note to record\"": "name:\"打开特定笔记进行记录\"",
        "name:\"assistant hover memos\"": "name:\"助手悬停备忘录\"",
        "name:\"hover local graph\"": "name:\"悬停局部图\"",
        "name:\"switch on/off plugin according to its status\"": "name:\"根据插件状态开启/关闭\"",
        "name:\"Set graph view colors\"": "name:\"设置图形视图颜色\"",
        "name:\"Update plugins with one command\"": "name:\"用一条命令更新插件\"",
        "name:\"Update themes with one command\"": "name:\"用一条命令更新主题\"",
        "name:\"Update metadata with one command\"": "name:\"用一条命令更新元数据\"",
        "name:\"List callout for quickly insert\"": "name:\"列出标注以便快速插入\"",
        "name:\"Preview records that are created by `startup-recording` command\"": "name:\"预览由`startup-recording`命令创建的记录\"",
        "name:\"Show statistics\"": "name:\"显示统计\"",
        "name:\"AI Helper\"": "name:\"AI 助手\"",
        "name:\"AI Auto Robot\"": "name:\"AI 自动机器人\"",
        "text:\"Statistics of Obsidian Vault\"": "text:\"Obsidian库的统计\"",
        "text:\"words of vault named as Anthelion\"": "text:\"名为Anthelion的库的字数\"",
        "text:\"+words\"": "text:\"+字数\"",
        "text:\"-pages\"": "text:\"-页面\"",
        "text:\"total files/pages of vault named as \"": "text:\"库的总文件数/页面数，名称为 \"",
        "text:\"total-files\"": "text:\"总文件数\"",
        "text:\"total-pages\"": "text:\"总页面数\"",
        "text:\"Settings for Obsidian Assistant\"": "text:\"Obsidian助手的设置\"",
        "text:\"Obsidian Assistant by Shadow Walker, \"": "text:\"Obsidian助手 - Shadow Walker\"",
        "text:\"Settings for Record\"": "text:\"记录的设置\"",
        "text:\"Obsidian Management for Recording in Specific Path\"": "text:\"Obsidian在特定路径中的记录管理\"",
        "text:\"Settings for Hover Local Graph\"": "text:\"悬停局部图设置\"",
        "text:\"Obsidian Management for Hover Local Graph\"": "text:\"Obsidian管理悬停局部图\"",
        "text:\"Graph Resize\"": "text:\"图形大小调整\"",
        "text:\"Settings for Memos\"": "text:\"备忘录设置\"",
        "text:\"Memos Resize\"": "text:\"备忘录大小调整\"",
        "text:\"Graph Colors\"": "text:\"图形颜色\"",
        "text:\"Metadata Management\"": "text:\"元数据管理\"",
        "text:\"Vault Statistics\"": "text:\"库统计\"",
        "text:\"AI Assistant\"": "text:\"AI助手\"",
        "text:\"AI Helper Only Support \\u901A\\u4E49\\u5343\\u95EE LLM\"": "text:\"AI助手仅支持通义千问LLM\"",
        ".setText(\"Open GitHub repository\")": ".setText(\"打开GitHub仓库\")",
        ".setButtonText(\"Change Color\")": ".setButtonText(\"更改颜色\")",
        ".setButtonText(\"Add Color\")": ".setButtonText(\"添加颜色\")",
        ".setButtonText(\"Add\")": ".setButtonText(\"添加\")",
        ".setName(\"Debug\")": ".setName(\"调试\")",
        ".setName(\"Target Path\")": ".setName(\"目标路径\")",
        ".setName(\"File Format\")": ".setName(\"文件格式\")",
        ".setName(\"Preview Number\")": ".setName(\"预览数量\")",
        ".setName(\"Type\")": ".setName(\"类型\")",
        ".setName(\"Depth\")": ".setName(\"深度\")",
        ".setName(\"Show Tags\")": ".setName(\"显示标签\")",
        ".setName(\"Show Attachment\")": ".setName(\"显示附件\")",
        ".setName(\"Show Neighbor\")": ".setName(\"显示邻居\")",
        ".setName(\"Collapse\")": ".setName(\"折叠\")",
        ".setName(\"Auto Local Graph Colors\")": ".setName(\"自动局部图颜色\")",
        ".setName(\"Enable Graph Colors\")": ".setName(\"启用图形颜色\")",
        ".setName(\"Enable Updating Metadata\")": ".setName(\"启用元数据更新\")",
        ".setName(\"Add Key:Value in frontmatter\")": ".setName(\"在前置区添加键值对\")",
        ".setName(\"Meta Updating Exclude Path\")": ".setName(\"元数据更新排除路径\")",
        ".setName(\"Show Statistics\")": ".setName(\"显示统计信息\")",
        ".setName(\"Vault Stats File Path\")": ".setName(\"库统计文件路径\")",
        ".setName(\"Animation\")": ".setName(\"动画\")",
        ".setName(\"Set Model Name\")": ".setName(\"设置模型名称\")",
        ".setName(\"API Token\")": ".setName(\"API令牌\")",
        ".setDesc(\"Target directory to do recording\")": ".setDesc(\"记录的目标目录\")",
        ".setDesc(\"File numbers to preview\")": ".setDesc(\"预览的文件数量\")",
        ".setDesc(\"Type of hover\")": ".setDesc(\"悬停的类型\")",
        ".setDesc(\"Depth of link jumps\")": ".setDesc(\"链接跳转的深度\")",
        ".setDesc(\"Show tags in local graph view\")": ".setDesc(\"在局部图中显示标签\")",
        ".setDesc(\"Show attachments in local graph view\")": ".setDesc(\"在局部图中显示附件\")",
        ".setDesc(\"Show neighbors in local graph view\")": ".setDesc(\"在局部图中显示邻居\")",
        ".setDesc(\"Collapse local graph view setting\")": ".setDesc(\"折叠局部图设置\")",
        ".setDesc(\"Automatically set colors of local graph view.\")": ".setDesc(\"自动设置局部图的颜色\")",
        ".setDesc(\"Use personal assistant set colors of graph view.\")": ".setDesc(\"使用个人助手设置图形颜色\")",
        ".setDesc(\"This will be the Color used in the graph view.\")": ".setDesc(\"这将是图形视图中使用的颜色\")",
        ".setDesc(\"Value now only upport formatted timestamp and regular string.\")": ".setDesc(\"目前仅支持格式化的时间戳和普通字符串\")",
        ".setDesc(\"Exclude files in the directory to update metadata\")": ".setDesc(\"排除更新元数据的目录中的文件\")",
        ".setDesc(\"Show statistics in the status bar\")": ".setDesc(\"在状态栏中显示统计信息\")",
        ".setDesc(\"Reload required for change to take effect. The location of the vault statistics file, relative to the vault root.\")": ".setDesc(\"需要重新加载以生效。库统计文件的位置，相对于库根目录\")",
        ".setDesc(\"Select the model name for AI Helper, only support qwen-max, qwen-turbo, qwen-plus\")": ".setDesc(\"选择AI助手的模型名称，仅支持qwen-max、qwen-turbo、qwen-plus\")",
        ".setDesc(\"LLM Model related API Token. NOTE: your input token is protected by AES-GCM encryption.\")": ".setDesc(\"LLM模型相关的API令牌。注意：您的输入令牌受到AES-GCM加密保护\")",
        ".setPlaceholder(\"popover\")": ".setPlaceholder(\"弹出框\")",
        ".setPlaceholder(\"height\")": ".setPlaceholder(\"高度\")",
        ".setPlaceholder(\"width\")": ".setPlaceholder(\"宽度\")",
        ".setPlaceholder(\"key\")": ".setPlaceholder(\"键\")",
        ".setPlaceholder(\"value\")": ".setPlaceholder(\"值\")",
        ".setPlaceholder(\"path strings with comma as separator, e.g. `tmp/,notes/templates`\")": ".setPlaceholder(\"路径字符串，逗号分隔，例如 `tmp/,notes/templates`\")",
        ".setPlaceholder(\"llm api token\")": ".setPlaceholder(\"llm API令牌\")",
        ".setPlaceholder(\"Type plugin name to find it\")": ".setPlaceholder(\"输入插件名称以查找\")",
        ".setTooltip(\"Remove\")": ".setTooltip(\"移除\")",
        ".setTooltip(\"Reset to default\")": ".setTooltip(\"重置为默认\")",
        ".appendText(` Color for #${m.query}`)": ".appendText(` #${m.query}的颜色`)",
        ".innerText=`File format which is like Diary setting.\nFor more syntax details, `": ".innerText=`文件格式类似日记设置。\n有关更多语法细节，`",
        ".innerText=\"please check moment format.\"": ".innerText=\"请检查moment格式\"",
        ".innerText=\"height\"": ".innerText=\"高度\"",
        ".innerText=\"width\"": ".innerText=\"宽度\"",
        ".innerText=\"top\"": ".innerText=\"顶部\"",
        ".innerText=\"left\"": ".innerText=\"左侧\"",
        ".innerText=\"Auto updating metadata in frontmatter when file is modified.\\nTimestamp format follows `moment.js` and syntax details, \"": ".innerText=\"修改文件时自动更新frontmatter中的元数据。\\nTimestamp格式遵循`moment.js `和语法细节，\"",
        ".append(\"Content-Type\",l)}this[Nn]={type:\"default\",url:r.url,status:n,statusText:r.statusText||\"\",headers:i,counter:r.counter,highWaterMark:r.highWaterMark}}get type(){return this[Nn].type}get url(){return this[Nn].url||\"\"}get status(){return this[Nn].status}get ok(){return this[Nn].status>=200&&this[Nn].status<300}get redirected(){return this[Nn].counter>0}get statusText(){return this[Nn].statusText}get headers(){return this[Nn].headers}get highWaterMark(){return this[Nn].highWaterMark}clone(){return new t(b0(this,this.highWaterMark),{type:this.type,url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected,size:this.size,highWaterMark:this.highWaterMark})}static redirect(e,r=302){if(!j3(r))throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');return new t(null,{headers:{location:new URL(e).toString()},status:r})}static error(){let e=new t(null,{status:0,statusText:\"\"});return e[Nn].type=\"error\",e}static json(e=void 0,r={}){let n=JSON.stringify(e);if(n===void 0)throw new TypeError(\"data is not JSON serializable\")": ".append(\"Content-Type\",l)}this[Nn]={type:\"default\",url:r.url,status:n,statusText:r.statusText||\"\",headers:i,counter:r.counter,highWaterMark:r.highWaterMark}}get type(){return this[Nn].type}get url(){return this[Nn].url||\"\"}get status(){return this[Nn].status}get ok(){return this[Nn].status>=200&&this[Nn].status<300}get redirected(){return this[Nn].counter>0}get statusText(){return this[Nn].statusText}get headers(){return this[Nn].headers}get highWaterMark(){return this[Nn].highWaterMark}clone(){return new t(b0(this,this.highWaterMark),{type:this.type,url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected,size:this.size,highWaterMark:this.highWaterMark})}static redirect(e,r=302){if(!j3(r))throw new RangeError('“redirect” 方法在 “response” 上执行失败：无效的状态码');return new t(null,{headers:{location:new URL(e).toString()},status:r})}static error(){let e=new t(null,{status:0,statusText:\"\"});return e[Nn].type=\"error\",e}static json(e=void 0,r={}){let n=JSON.stringify(e);if(n===void 0)throw new TypeError(\"数据不是有效的JSON序列化对象\")",
        ".append(\"id\",o);return dt(e),await(await this.caller.call(je(),`${this.apiUrl}/public/${e}/runs${n}`,{method:\"GET\",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions})).json()}async readDatasetSharedSchema(e,r){if(!e&&!r)throw new Error(\"Either datasetId or datasetName must be given\")": ".append(\"id\",o);return dt(e),await(await this.caller.call(je(),`${this.apiUrl}/public/${e}/runs${n}`,{method:\"GET\",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions})).json()}async readDatasetSharedSchema(e,r){if(!e&&!r)throw new Error(\"必须提供数据集ID或数据集名称\")",
        ".append(\"name\",r);else throw new Error(\"Must provide projectName or projectId\")": ".append(\"name\",r);else throw new Error(\"必须提供项目名称或项目ID\")",
        ".append(\"include_stats\",n.toString());let o=await this._get(i,l),a;if(Array.isArray(o)){if(o.length===0)throw new Error(`Project[id=${e}, name=${r}] not found`);a=o[0]}else a=o;return a}async getProjectUrl({projectId:e,projectName:r}){if(e===void 0&&r===void 0)throw new Error(\"Must provide either projectName or projectId\")": ".append(\"include_stats\",n.toString());let o=await this._get(i,l),a;if(Array.isArray(o)){if(o.length===0)throw new Error(`项目[id=${e}, 名称=${r}] 未找到`);a=o[0]}else a=o;return a}async getProjectUrl({projectId:e,projectName:r}){if(e===void 0&&r===void 0)throw new Error(\"必须提供项目名称或项目ID\")",
        ".append(\"id\",u);if(r!==void 0&&s.append(\"name\",r),n!==void 0&&s.append(\"name_contains\",n),i!==void 0)s.append(\"reference_dataset\",i);else if(l!==void 0){let u=await this.readDataset({datasetName:l});s.append(\"reference_dataset\",u.id)}o!==void 0&&s.append(\"reference_free\",o.toString()),a!==void 0&&s.append(\"metadata\",JSON.stringify(a));for await(let u of this._getPaginated(\"/sessions\",s))yield*u}async deleteProject({projectId:e,projectName:r}){let n;if(e===void 0&&r===void 0)throw new Error(\"Must provide projectName or projectId\")": ".append(\"id\",u);if(r!==void 0&&s.append(\"name\",r),n!==void 0&&s.append(\"name_contains\",n),i!==void 0)s.append(\"reference_dataset\",i);else if(l!==void 0){let u=await this.readDataset({datasetName:l});s.append(\"reference_dataset\",u.id)}o!==void 0&&s.append(\"reference_free\",o.toString()),a!==void 0&&s.append(\"metadata\",JSON.stringify(a));for await(let u of this._getPaginated(\"/sessions\",s))yield*u}async deleteProject({projectId:e,projectName:r}){let n;if(e===void 0&&r===void 0)throw new Error(\"必须提供项目名称或项目ID\")",
        ".append(\"file\",e,r),n.forEach(f=>{u.append(\"input_keys\",f)}),i.forEach(f=>{u.append(\"output_keys\",f)}),l&&u.append(\"description\",l),o&&u.append(\"data_type\",o),a&&u.append(\"name\",a);let c=await this.caller.call(je(),s,{method:\"POST\",headers:this.headers,body:u,signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});return await ht(c,\"upload CSV\")": ".append(\"file\",e,r),n.forEach(f=>{u.append(\"input_keys\",f)}),i.forEach(f=>{u.append(\"output_keys\",f)}),l&&u.append(\"description\",l),o&&u.append(\"data_type\",o),a&&u.append(\"name\",a);let c=await this.caller.call(je(),s,{method:\"POST\",headers:this.headers,body:u,signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});return await ht(c,\"上传CSV\")",
        ".append(\"name\",r);else throw new Error(\"Must provide datasetName or datasetId\")": ".append(\"name\",r);else throw new Error(\"必须提供数据集名称或数据集ID\")",
        ".append(\"id\",u);i!==void 0&&s.append(\"name\",i),l!==void 0&&s.append(\"name_contains\",l),o!==void 0&&s.append(\"metadata\",JSON.stringify(o));for await(let u of this._getPaginated(a,s))yield*u}async updateDataset(e){let{datasetId:r,datasetName:n,...i}=e;if(!r&&!n)throw new Error(\"Must provide either datasetName or datasetId\")": ".append(\"id\",u);i!==void 0&&s.append(\"name\",i),l!==void 0&&s.append(\"name_contains\",l),o!==void 0&&s.append(\"metadata\",JSON.stringify(o));for await(let u of this._getPaginated(a,s))yield*u}async updateDataset(e){let{datasetId:r,datasetName:n,...i}=e;if(!r&&!n)throw new Error(\"必须提供数据集名称或数据集ID\")",
        ".append(\"as_of\",m);let p=o!=null?o:!0;if(f.append(\"inline_s3_urls\",p.toString()),n!==void 0)for(let b of n)f.append(\"id\",b);if(l!==void 0)for(let b of l)f.append(\"splits\",b);if(a!==void 0){let b=JSON.stringify(a);f.append(\"metadata\",b)}s!==void 0&&f.append(\"limit\",s.toString()),u!==void 0&&f.append(\"offset\",u.toString()),c!==void 0&&f.append(\"filter\",c);let v=0;for await(let b of this._getPaginated(\"/examples\",f)){for(let w of b)yield w,v++;if(s!==void 0&&v>=s)break}}async deleteExample(e){dt(e);let r=`/examples/${e}`,n=await this.caller.call(je(),this.apiUrl+r,{method:\"DELETE\",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});await ht(n,`delete ${r}`),await n.json()}async updateExample(e,r){dt(e);let n=await this.caller.call(je(),`${this.apiUrl}/examples/${e}`,{method:\"PATCH\",headers:{...this.headers,\"Content-Type\":\"application/json\"},body:JSON.stringify(r),signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});return await ht(n,\"update example\")": ".append(\"as_of\",m);let p=o!=null?o:!0;if(f.append(\"inline_s3_urls\",p.toString()),n!==void 0)for(let b of n)f.append(\"id\",b);if(l!==void 0)for(let b of l)f.append(\"splits\",b);if(a!==void 0){let b=JSON.stringify(a);f.append(\"metadata\",b)}s!==void 0&&f.append(\"limit\",s.toString()),u!==void 0&&f.append(\"offset\",u.toString()),c!==void 0&&f.append(\"filter\",c);let v=0;for await(let b of this._getPaginated(\"/examples\",f)){for(let w of b)yield w,v++;if(s!==void 0&&v>=s)break}}async deleteExample(e){dt(e);let r=`/examples/${e}`,n=await this.caller.call(je(),this.apiUrl+r,{method:\"DELETE\",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});await ht(n,`删除 ${r}`),await n.json()}async updateExample(e,r){dt(e);let n=await this.caller.call(je(),`${this.apiUrl}/examples/${e}`,{method:\"PATCH\",headers:{...this.headers,\"Content-Type\":\"application/json\"},body:JSON.stringify(r),signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});return await ht(n,\"更新示例\")",
        ".append(\"as_of\",o),await this._get(`/datasets/${i}/splits`,l)}async updateDatasetSplits({datasetId:e,datasetName:r,splitName:n,exampleIds:i,remove:l=!1}){let o;if(e===void 0&&r===void 0)throw new Error(\"Must provide dataset name or ID\")": ".append(\"as_of\",o),await this._get(`/datasets/${i}/splits`,l)}async updateDatasetSplits({datasetId:e,datasetName:r,splitName:n,exampleIds:i,remove:l=!1}){let o;if(e===void 0&&r===void 0)throw new Error(\"必须提供数据集名称或ID\")",
        ".append(\"key\",l);if(n)for(let l of n)i.append(\"source\",l);for await(let l of this._getPaginated(\"/feedback\",i))yield*l}async createPresignedFeedbackToken(e,r,{expiration:n,feedbackConfig:i}={}){let l={run_id:e,feedback_key:r,feedback_config:i};return n?typeof n==\"string\"?l.expires_at=n:(n!=null&&n.hours||n!=null&&n.minutes||n!=null&&n.days)&&(l.expires_in=n):l.expires_in={hours:3},await(await this.caller.call(je(),`${this.apiUrl}/feedback/tokens`,{method:\"POST\",headers:{...this.headers,\"Content-Type\":\"application/json\"},body:JSON.stringify(l),signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions})).json()}async createComparativeExperiment({name:e,experimentIds:r,referenceDatasetId:n,createdAt:i,description:l,metadata:o,id:a}){var c;if(r.length===0)throw new Error(\"At least one experiment is required\")": ".append(\"key\",l);if(n)for(let l of n)i.append(\"source\",l);for await(let l of this._getPaginated(\"/feedback\",i))yield*l}async createPresignedFeedbackToken(e,r,{expiration:n,feedbackConfig:i}={}){let l={run_id:e,feedback_key:r,feedback_config:i};return n?typeof n==\"string\"?l.expires_at=n:(n!=null&&n.hours||n!=null&&n.minutes||n!=null&&n.days)&&(l.expires_in=n):l.expires_in={hours:3},await(await this.caller.call(je(),`${this.apiUrl}/feedback/tokens`,{method:\"POST\",headers:{...this.headers,\"Content-Type\":\"application/json\"},body:JSON.stringify(l),signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions})).json()}async createComparativeExperiment({name:e,experimentIds:r,referenceDatasetId:n,createdAt:i,description:l,metadata:o,id:a}){var c;if(r.length===0)throw new Error(\"至少需要一个实验\")",
        ".append(\"ids\",s)}),n&&o.append(\"name\",n),i&&o.append(\"name_contains\",i),o.append(\"limit\",(l!==void 0?Math.min(l,100):100).toString());let a=0;for await(let s of this._getPaginated(\"/annotation-queues\",o))if(yield*s,a++,l!==void 0&&a>=l)break}async createAnnotationQueue(e){let{name:r,description:n,queueId:i}=e,l={name:r,description:n,id:i||kr()},o=await this.caller.call(je(),`${this.apiUrl}/annotation-queues`,{method:\"POST\",headers:{...this.headers,\"Content-Type\":\"application/json\"},body:JSON.stringify(Object.fromEntries(Object.entries(l).filter(([s,u])=>u!==void 0))),signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});return await ht(o,\"create annotation queue\")": ".append(\"ids\",s)}),n&&o.append(\"name\",n),i&&o.append(\"name_contains\",i),o.append(\"limit\",(l!==void 0?Math.min(l,100):100).toString());let a=0;for await(let s of this._getPaginated(\"/annotation-queues\",o))if(yield*s,a++,l!==void 0&&a>=l)break}async createAnnotationQueue(e){let{name:r,description:n,queueId:i}=e,l={name:r,description:n,id:i||kr()},o=await this.caller.call(je(),`${this.apiUrl}/annotation-queues`,{method:\"POST\",headers:{...this.headers,\"Content-Type\":\"application/json\"},body:JSON.stringify(Object.fromEntries(Object.entries(l).filter(([s,u])=>u!==void 0))),signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});return await ht(o,\"创建标注队列\")",
        ".append(\"is_archived\",(!!(e!=null&&e.isArchived)).toString()),(e==null?void 0:e.isPublic)!==void 0&&r.append(\"is_public\",e.isPublic.toString()),e!=null&&e.query&&r.append(\"query\",e.query);for await(let i of this._getPaginated(\"/repos\",r,l=>l.repos))yield*i}async getPrompt(e){let[r,n,i]=El(e),l=await this.caller.call(je(),`${this.apiUrl}/repos/${r}/${n}`,{method:\"GET\",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});if(l.status===404)return null;await ht(l,\"get prompt\")": ".append(\"is_archived\",(!!(e!=null&&e.isArchived)).toString()),(e==null?void 0:e.isPublic)!==void 0&&r.append(\"is_public\",e.isPublic.toString()),e!=null&&e.query&&r.append(\"query\",e.query);for await(let i of this._getPaginated(\"/repos\",r,l=>l.repos))yield*i}async getPrompt(e){let[r,n,i]=El(e),l=await this.caller.call(je(),`${this.apiUrl}/repos/${r}/${n}`,{method:\"GET\",headers:this.headers,signal:AbortSignal.timeout(this.timeout_ms),...this.fetchOptions});if(l.status===404)return null;await ht(l,\"获取提示\")",
        ".addOption(\"string\",\"1 Regular String\")": ".addOption(\"string\",\"1 常规字符\")",
        ".addOption(\"moment\",\"2 Timestamp\")": ".addOption(\"moment\",\"2 时间戳\")",
        ".addOption(\"daily\",\"Daily Statistcs\")": ".addOption(\"daily\",\"每日统计\")",
        ".addOption(\"total\",\"Total Statistics\")": ".addOption(\"total\",\"全部统计\")",
        "label:\"Daily Words\"": "label:\"每日词汇\"",
        "label:\"Daily Pages\"": "label:\"每日页面\"",
        "label:\"Total Files\"": "label:\"文件总数\"",
        "label:\"Total Pages\"": "label:\"页面总数\"",
        "innerText=\"Auto updating metadata in frontmatter when file is modified.\\nTimestamp format follows `moment.js` and syntax details, \"": "innerText=\"文件修改时自动更新前置元数据。\\n时间戳格式遵循 `moment.js` 和语法细节，\""
    }
}
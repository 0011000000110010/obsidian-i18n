{
    "manifest": {
        "translationVersion": 1733729753395,
        "pluginVersion": "1.8.2"
    },
    "description": {
        "original": "MetaEdit helps you manage your metadata.",
        "translation": "MetaEdit 帮助您管理元数据。"
    },
    "dict": {
        "Notice(`Frontmatter in file '${file.name}' already has property '${propName}. Will not add.'`)": "Notice(`Frontmatter in file '${file.name}' already has property '${propName}. Will not add.'`)",
        "Notice(this.formatOutputString(error)": "Notice(this.formatOutputString(error)",
        "Notice(this.formatOutputString(warning)": "Notice(this.formatOutputString(warning)",
        "Notice(`'${board.property} not found in ${board.boardName} for file \"${linkFile.name}\".'`)": "Notice(`'${board.property} not found in ${board.boardName} for file \"${linkFile.name}\".'`)",
        ".log(this.formatOutputString(log)": ".log(this.formatOutputString(log)",
        ".log('Loading MetaEdit')": ".log('Loading MetaEdit')",
        ".log('Unloading MetaEdit')": ".log('Unloading MetaEdit')",
        ".error(['Popper: \"arrow\" element must be an HTMLElement (not an SVGElement)": ".error(['Popper: \"arrow\" element must be an HTMLElement (not an SVGElement)",
        ".error(['Popper: \"arrow\" modifier\\'s `element` must be a child of the popper', 'element.'].join(' ')": ".error(['Popper: \"arrow\" modifier\\'s `element` must be a child of the popper', 'element.'].join(' ')",
        ".error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, \"auto\" cannot be used to allow \"bottom-start\".', 'Use \"auto-start\" instead.'].join(' ')": ".error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, \"auto\" cannot be used to allow \"bottom-start\".', 'Use \"auto-start\" instead.'].join(' ')",
        ".error(format(INVALID_MODIFIER_ERROR, String(modifier.name)": ".error(format(INVALID_MODIFIER_ERROR, String(modifier.name)",
        ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', \"\\\"\" + String(modifier.enabled)": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', \"\\\"\" + String(modifier.enabled)",
        ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', \"either \" + modifierPhases.join(', ')": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', \"either \" + modifierPhases.join(', ')",
        ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', \"\\\"\" + String(modifier.fn)": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', \"\\\"\" + String(modifier.fn)",
        ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', \"\\\"\" + String(modifier.fn)": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', \"\\\"\" + String(modifier.fn)",
        ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', \"\\\"\" + String(modifier.requires)": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', \"\\\"\" + String(modifier.requires)",
        ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', \"\\\"\" + String(modifier.requiresIfExists)": ".error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', \"\\\"\" + String(modifier.requiresIfExists)",
        ".error(\"PopperJS: an invalid property has been provided to the \\\"\" + modifier.name + \"\\\" modifier, valid properties are \" + VALID_PROPERTIES.map(function (s)": ".error(\"PopperJS: an invalid property has been provided to the \\\"\" + modifier.name + \"\\\" modifier, valid properties are \" + VALID_PROPERTIES.map(function (s)",
        ".error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name)": ".error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name)",
        ".error(['Popper: \"auto\" placements require the \"flip\" modifier be', 'present and enabled to work.'].join(' ')": ".error(['Popper: \"auto\" placements require the \"flip\" modifier be', 'present and enabled to work.'].join(' ')",
        ".error(INVALID_ELEMENT_ERROR)": ".error(INVALID_ELEMENT_ERROR)",
        ".error(INFINITE_LOOP_ERROR)": ".error(INFINITE_LOOP_ERROR)",
        ".error(e)": ".error(e)",
        ".error(this.formatOutputString(error)": ".error(this.formatOutputString(error)",
        "name: \"\", choices: [\"": "name: \"\", choices: [\"",
        "name: 'applyStyles'": "name: '应用样式'",
        "name: 'arrow'": "name: '箭头'",
        "name: 'computeStyles'": "name: '计算样式'",
        "name: 'eventListeners'": "name: '事件监听器'",
        "name: 'flip'": "name: '翻转'",
        "name: 'hide'": "name: '隐藏'",
        "name: 'offset'": "name: '偏移'",
        "name: 'popperOffsets'": "name: '弹出偏移'",
        "name: 'preventOverflow'": "name: '防止溢出'",
        "name: \"sameWidth\"": "name: \"相同宽度\"",
        "name: 'Run MetaEdit'": "name: '运行 MetaEdit'",
        "text: 'reference'": "text: '引用'",
        "text: 'MetaEdit Settings'": "text: 'MetaEdit 设置'",
        "text: \"Single: property values are just one value. \"": "text: \"单一：属性值仅为一个值。\"",
        "text: \"Multi: properties are arrays. \"": "text: \"多选：属性为数组。\"",
        "text: \"Some Multi: all options are single, except those specified in the settings (click button).\"": "text: \"部分多选：除设置中指定的选项外，其余均为单选（点击按钮）。\"",
        ".setName(\"Progress Properties\")": ".setName(\"进度属性\")",
        ".setName(\"Auto Properties\")": ".setName(\"自动属性\")",
        ".setName(\"Ignore Properties\")": ".setName(\"忽略属性\")",
        ".setName(\"Edit Mode\")": ".setName(\"编辑模式\")",
        ".setName(\"Kanban Board Helper\")": ".setName(\"看板助手\")",
        ".setName(\"UI Elements\")": ".setName(\"UI 元素\")",
        ".setDesc(\"Update properties automatically.\")": ".setDesc(\"自动更新属性。\")",
        ".setDesc(\"Quick switch for values you know the value of.\")": ".setDesc(\"快速切换已知值。\")",
        ".setDesc(\"Hide these properties from the menu.\")": ".setDesc(\"从菜单中隐藏这些属性。\")",
        ".setDesc(\"Update properties in links in kanban boards automatically when a card is moved to a new lane.\")": ".setDesc(\"当卡片移动到新泳道时，自动更新看板链接中的属性。\")",
        ".setDesc(\"Toggle UI elements: the 'Edit Meta' right-click menu option.\")": ".setDesc(\"切换 UI 元素：'编辑元数据' 右键菜单选项。\")",
        ".setTooltip(\"Toggle Progress Properties\")": ".setTooltip(\"切换进度属性\")",
        ".setTooltip(\"Toggle Auto Properties\")": ".setTooltip(\"切换自动属性\")",
        ".setTooltip(\"Toggle Ignored Properties\")": ".setTooltip(\"切换忽略属性\")",
        ".setTooltip(\"Configure which properties are Multi.\")": ".setTooltip(\"配置哪些属性为多选。\")",
        ".setTooltip(\"Toggle Kanban Helper\")": ".setTooltip(\"切换看板助手\")",
        ".setTooltip(\"Toggle UI elements\")": ".setTooltip(\"切换 UI 元素\")",
        ".setTitle(\"Edit Meta\")": ".setTitle(\"编辑元数据\")",
        ".setTitle(\"Add YAML property to all files in this folder (and subfolders)\")": ".setTitle(\"将 YAML 属性添加到此文件夹（及子文件夹）中的所有文件\")"
    }
}